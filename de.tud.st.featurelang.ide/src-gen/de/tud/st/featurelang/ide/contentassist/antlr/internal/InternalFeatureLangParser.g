/*
 * generated by Xtext 2.32.0
 */
parser grammar InternalFeatureLangParser;

options {
	tokenVocab=InternalFeatureLangLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package de.tud.st.featurelang.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.tud.st.featurelang.services.FeatureLangGrammarAccess;

}
@members {
	private FeatureLangGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("A", "'a'");
		tokenNameToValue.put("An", "'an'");
		tokenNameToValue.put("Be", "'be'");
		tokenNameToValue.put("Is", "'is'");
		tokenNameToValue.put("It", "'it'");
		tokenNameToValue.put("Of", "'of'");
		tokenNameToValue.put("To", "'to'");
		tokenNameToValue.put("Up", "'up'");
		tokenNameToValue.put("URI", "'URI'");
		tokenNameToValue.put("All", "'all'");
		tokenNameToValue.put("Has", "'has'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("The", "'the'");
		tokenNameToValue.put("Date", "'date'");
		tokenNameToValue.put("From", "'from'");
		tokenNameToValue.put("Have", "'have'");
		tokenNameToValue.put("Must", "'must'");
		tokenNameToValue.put("Name", "'name'");
		tokenNameToValue.put("Role", "'role'");
		tokenNameToValue.put("Time", "'time'");
		tokenNameToValue.put("With", "'with'");
		tokenNameToValue.put("Class", "'class'");
		tokenNameToValue.put("Exist", "'exist'");
		tokenNameToValue.put("Other", "'other'");
		tokenNameToValue.put("Range", "'range'");
		tokenNameToValue.put("Value", "'value'");
		tokenNameToValue.put("Called", "'called'");
		tokenNameToValue.put("Number", "'number'");
		tokenNameToValue.put("Phrase", "'phrase'");
		tokenNameToValue.put("Public", "'public'");
		tokenNameToValue.put("Should", "'should'");
		tokenNameToValue.put("Target", "'target'");
		tokenNameToValue.put("Compose", "'compose'");
		tokenNameToValue.put("Inherit", "'inherit'");
		tokenNameToValue.put("Private", "'private'");
		tokenNameToValue.put("Variant", "'variant'");
		tokenNameToValue.put("Version", "'version'");
		tokenNameToValue.put("Abstract", "'abstract'");
		tokenNameToValue.put("Existing", "'existing'");
		tokenNameToValue.put("Starting", "'starting'");
		tokenNameToValue.put("Versions", "'versions'");
		tokenNameToValue.put("Attribute", "'attribute'");
		tokenNameToValue.put("Compatible", "'compatible'");
		tokenNameToValue.put("Association", "'association'");
		tokenNameToValue.put("Composition", "'composition'");
		tokenNameToValue.put("Inheritance", "'inheritance'");
		tokenNameToValue.put("Associations", "'associations'");
	}

	public void setGrammarAccess(FeatureLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleFeatureRequest
entryRuleFeatureRequest
:
{ before(grammarAccess.getFeatureRequestRule()); }
	 ruleFeatureRequest
{ after(grammarAccess.getFeatureRequestRule()); } 
	 EOF 
;

// Rule FeatureRequest
ruleFeatureRequest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureRequestAccess().getStatementsAssignment()); }
		(rule__FeatureRequest__StatementsAssignment)*
		{ after(grammarAccess.getFeatureRequestAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChangeStatement
entryRuleChangeStatement
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getChangeStatementRule()); }
	 ruleChangeStatement
{ after(grammarAccess.getChangeStatementRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ChangeStatement
ruleChangeStatement 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChangeStatementAccess().getGroup()); }
		(rule__ChangeStatement__Group__0)
		{ after(grammarAccess.getChangeStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreationStatement
entryRuleCreationStatement
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getCreationStatementRule()); }
	 ruleCreationStatement
{ after(grammarAccess.getCreationStatementRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CreationStatement
ruleCreationStatement 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreationStatementAccess().getGroup()); }
		(rule__CreationStatement__Group__0)
		{ after(grammarAccess.getCreationStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAction
entryRuleAction
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Action
ruleAction 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getTypeAssignment()); }
		(rule__Action__TypeAssignment)
		{ after(grammarAccess.getActionAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAction
entryRuleUpdateAction
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getUpdateActionRule()); }
	 ruleUpdateAction
{ after(grammarAccess.getUpdateActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAction
ruleUpdateAction 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateActionAccess().getGroup()); }
		(rule__UpdateAction__Group__0)
		{ after(grammarAccess.getUpdateActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAttributeDatatype
entryRuleUpdateAttributeDatatype
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getUpdateAttributeDatatypeRule()); }
	 ruleUpdateAttributeDatatype
{ after(grammarAccess.getUpdateAttributeDatatypeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAttributeDatatype
ruleUpdateAttributeDatatype 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateAttributeDatatypeAccess().getGroup()); }
		(rule__UpdateAttributeDatatype__Group__0)
		{ after(grammarAccess.getUpdateAttributeDatatypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAttributeIdentifier
entryRuleUpdateAttributeIdentifier
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getUpdateAttributeIdentifierRule()); }
	 ruleUpdateAttributeIdentifier
{ after(grammarAccess.getUpdateAttributeIdentifierRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAttributeIdentifier
ruleUpdateAttributeIdentifier 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getGroup()); }
		(rule__UpdateAttributeIdentifier__Group__0)
		{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAttributeValue
entryRuleUpdateAttributeValue
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getUpdateAttributeValueRule()); }
	 ruleUpdateAttributeValue
{ after(grammarAccess.getUpdateAttributeValueRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAttributeValue
ruleUpdateAttributeValue 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateAttributeValueAccess().getGroup()); }
		(rule__UpdateAttributeValue__Group__0)
		{ after(grammarAccess.getUpdateAttributeValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAttributeAction
entryRuleAttributeAction
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getAttributeActionRule()); }
	 ruleAttributeAction
{ after(grammarAccess.getAttributeActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AttributeAction
ruleAttributeAction 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeActionAccess().getGroup()); }
		(rule__AttributeAction__Group__0)
		{ after(grammarAccess.getAttributeActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssociationAction
entryRuleAssociationAction
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getAssociationActionRule()); }
	 ruleAssociationAction
{ after(grammarAccess.getAssociationActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AssociationAction
ruleAssociationAction 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociationActionAccess().getGroup()); }
		(rule__AssociationAction__Group__0)
		{ after(grammarAccess.getAssociationActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreateAssociation
entryRuleCreateAssociation
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getCreateAssociationRule()); }
	 ruleCreateAssociation
{ after(grammarAccess.getCreateAssociationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CreateAssociation
ruleCreateAssociation 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateAssociationAccess().getGroup()); }
		(rule__CreateAssociation__Group__0)
		{ after(grammarAccess.getCreateAssociationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEditAssociation
entryRuleEditAssociation
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getEditAssociationRule()); }
	 ruleEditAssociation
{ after(grammarAccess.getEditAssociationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EditAssociation
ruleEditAssociation 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeAssignment()); }
		(rule__EditAssociation__TypeAssignment)
		{ after(grammarAccess.getEditAssociationAccess().getTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetCompatible
entryRuleSetCompatible
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSetCompatibleRule()); }
	 ruleSetCompatible
{ after(grammarAccess.getSetCompatibleRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SetCompatible
ruleSetCompatible 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetCompatibleAccess().getGroup()); }
		(rule__SetCompatible__Group__0)
		{ after(grammarAccess.getSetCompatibleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetVersionRange
entryRuleSetVersionRange
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSetVersionRangeRule()); }
	 ruleSetVersionRange
{ after(grammarAccess.getSetVersionRangeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SetVersionRange
ruleSetVersionRange 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetVersionRangeAccess().getGroup()); }
		(rule__SetVersionRange__Group__0)
		{ after(grammarAccess.getSetVersionRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetVariant
entryRuleSetVariant
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSetVariantRule()); }
	 ruleSetVariant
{ after(grammarAccess.getSetVariantRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SetVariant
ruleSetVariant 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetVariantAccess().getGroup()); }
		(rule__SetVariant__Group__0)
		{ after(grammarAccess.getSetVariantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetRightOpen
entryRuleSetRightOpen
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSetRightOpenRule()); }
	 ruleSetRightOpen
{ after(grammarAccess.getSetRightOpenRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SetRightOpen
ruleSetRightOpen 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetRightOpenAccess().getGroup()); }
		(rule__SetRightOpen__Group__0)
		{ after(grammarAccess.getSetRightOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetLeftOpen
entryRuleSetLeftOpen
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSetLeftOpenRule()); }
	 ruleSetLeftOpen
{ after(grammarAccess.getSetLeftOpenRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SetLeftOpen
ruleSetLeftOpen 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetLeftOpenAccess().getGroup()); }
		(rule__SetLeftOpen__Group__0)
		{ after(grammarAccess.getSetLeftOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInheritanceAction
entryRuleInheritanceAction
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getInheritanceActionRule()); }
	 ruleInheritanceAction
{ after(grammarAccess.getInheritanceActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InheritanceAction
ruleInheritanceAction 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInheritanceActionAccess().getAlternatives()); }
		(rule__InheritanceAction__Alternatives)
		{ after(grammarAccess.getInheritanceActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreateInheritance
entryRuleCreateInheritance
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getCreateInheritanceRule()); }
	 ruleCreateInheritance
{ after(grammarAccess.getCreateInheritanceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CreateInheritance
ruleCreateInheritance 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateInheritanceAccess().getGroup()); }
		(rule__CreateInheritance__Group__0)
		{ after(grammarAccess.getCreateInheritanceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEditInheritance
entryRuleEditInheritance
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getEditInheritanceRule()); }
	 ruleEditInheritance
{ after(grammarAccess.getEditInheritanceRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EditInheritance
ruleEditInheritance 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEditInheritanceAccess().getGroup()); }
		(rule__EditInheritance__Group__0)
		{ after(grammarAccess.getEditInheritanceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCompositionAction
entryRuleCompositionAction
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getCompositionActionRule()); }
	 ruleCompositionAction
{ after(grammarAccess.getCompositionActionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CompositionAction
ruleCompositionAction 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositionActionAccess().getAlternatives()); }
		(rule__CompositionAction__Alternatives)
		{ after(grammarAccess.getCompositionActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreateComposition
entryRuleCreateComposition
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getCreateCompositionRule()); }
	 ruleCreateComposition
{ after(grammarAccess.getCreateCompositionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CreateComposition
ruleCreateComposition 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateCompositionAccess().getGroup()); }
		(rule__CreateComposition__Group__0)
		{ after(grammarAccess.getCreateCompositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEditComposition
entryRuleEditComposition
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getEditCompositionRule()); }
	 ruleEditComposition
{ after(grammarAccess.getEditCompositionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EditComposition
ruleEditComposition 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEditCompositionAccess().getGroup()); }
		(rule__EditComposition__Group__0)
		{ after(grammarAccess.getEditCompositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleClass
entryRuleClass
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Class
ruleClass 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAttribute
entryRuleAttribute
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Attribute
ruleAttribute 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Identifier
ruleIdentifier 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getGroup()); }
		(rule__Identifier__Group__0)
		{ after(grammarAccess.getIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRulePriority
entryRulePriority
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getPriorityRule()); }
	 rulePriority
{ after(grammarAccess.getPriorityRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Priority
rulePriority 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPriorityAccess().getPriorityAssignment()); }
		(rule__Priority__PriorityAssignment)
		{ after(grammarAccess.getPriorityAccess().getPriorityAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Rule CompositionParameter
ruleCompositionParameter
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionParameterAccess().getAlternatives()); }
		(rule__CompositionParameter__Alternatives)
		{ after(grammarAccess.getCompositionParameterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Publicity
rulePublicity
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPublicityAccess().getAlternatives()); }
		(rule__Publicity__Alternatives)
		{ after(grammarAccess.getPublicityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PriorityValue
rulePriorityValue
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityValueAccess().getAlternatives()); }
		(rule__PriorityValue__Alternatives)
		{ after(grammarAccess.getPriorityValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Abstraction
ruleAbstraction
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractionAccess().getABSTRACTEnumLiteralDeclaration()); }
		(Abstract)
		{ after(grammarAccess.getAbstractionAccess().getABSTRACTEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule IdentifierValue
ruleIdentifierValue
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierValueAccess().getAlternatives()); }
		(rule__IdentifierValue__Alternatives)
		{ after(grammarAccess.getIdentifierValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Datatype
ruleDatatype
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getAlternatives()); }
		(rule__Datatype__Alternatives)
		{ after(grammarAccess.getDatatypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getChangeStatementParserRuleCall_0_0()); }
		ruleChangeStatement
		{ after(grammarAccess.getStatementAccess().getChangeStatementParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getCreationStatementParserRuleCall_0_1()); }
		ruleCreationStatement
		{ after(grammarAccess.getStatementAccess().getCreationStatementParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getGroup_1_0()); }
		(rule__ChangeStatement__Group_1_0__0)
		{ after(grammarAccess.getChangeStatementAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getChangeStatementAccess().getUpdateAssignment_1_1()); }
		(rule__ChangeStatement__UpdateAssignment_1_1)
		{ after(grammarAccess.getChangeStatementAccess().getUpdateAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Alternatives_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getActionAssignment_1_0_2_0()); }
		(rule__ChangeStatement__ActionAssignment_1_0_2_0)
		{ after(grammarAccess.getChangeStatementAccess().getActionAssignment_1_0_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getChangeStatementAccess().getGroup_1_0_2_1()); }
		(rule__ChangeStatement__Group_1_0_2_1__0)
		{ after(grammarAccess.getChangeStatementAccess().getGroup_1_0_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Alternatives_1_0_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getAKeyword_1_0_2_1_1_0()); }
		A
		{ after(grammarAccess.getChangeStatementAccess().getAKeyword_1_0_2_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getChangeStatementAccess().getAnKeyword_1_0_2_1_1_1()); }
		An
		{ after(grammarAccess.getChangeStatementAccess().getAnKeyword_1_0_2_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreationStatementAccess().getExistKeyword_3_0()); }
		Exist
		{ after(grammarAccess.getCreationStatementAccess().getExistKeyword_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getCreationStatementAccess().getBeKeyword_3_1()); }
		Be
		{ after(grammarAccess.getCreationStatementAccess().getBeKeyword_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getTypeAttributeActionParserRuleCall_0_0()); }
		ruleAttributeAction
		{ after(grammarAccess.getActionAccess().getTypeAttributeActionParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getTypeAssociationActionParserRuleCall_0_1()); }
		ruleAssociationAction
		{ after(grammarAccess.getActionAccess().getTypeAssociationActionParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getTypeInheritanceActionParserRuleCall_0_2()); }
		ruleInheritanceAction
		{ after(grammarAccess.getActionAccess().getTypeInheritanceActionParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getTypeCompositionActionParserRuleCall_0_3()); }
		ruleCompositionAction
		{ after(grammarAccess.getActionAccess().getTypeCompositionActionParserRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getAnKeyword_1_0()); }
		An
		{ after(grammarAccess.getUpdateActionAccess().getAnKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getUpdateActionAccess().getAKeyword_1_1()); }
		A
		{ after(grammarAccess.getUpdateActionAccess().getAKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Alternatives_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getDatatypeAssignment_7_0()); }
		(rule__UpdateAction__DatatypeAssignment_7_0)
		{ after(grammarAccess.getUpdateActionAccess().getDatatypeAssignment_7_0()); }
	)
	|
	(
		{ before(grammarAccess.getUpdateActionAccess().getIdentifierAssignment_7_1()); }
		(rule__UpdateAction__IdentifierAssignment_7_1)
		{ after(grammarAccess.getUpdateActionAccess().getIdentifierAssignment_7_1()); }
	)
	|
	(
		{ before(grammarAccess.getUpdateActionAccess().getValueAssignment_7_2()); }
		(rule__UpdateAction__ValueAssignment_7_2)
		{ after(grammarAccess.getUpdateActionAccess().getValueAssignment_7_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getAKeyword_1_0()); }
		A
		{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getAKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getAnKeyword_1_1()); }
		An
		{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getAnKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeActionAccess().getTheKeyword_1_0()); }
		The
		{ after(grammarAccess.getAttributeActionAccess().getTheKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeActionAccess().getAnKeyword_1_1()); }
		An
		{ after(grammarAccess.getAttributeActionAccess().getAnKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeActionAccess().getAKeyword_1_2()); }
		A
		{ after(grammarAccess.getAttributeActionAccess().getAKeyword_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationActionAccess().getAssociationsKeyword_1_0()); }
		Associations
		{ after(grammarAccess.getAssociationActionAccess().getAssociationsKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssociationActionAccess().getAssociationKeyword_1_1()); }
		Association
		{ after(grammarAccess.getAssociationActionAccess().getAssociationKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationActionAccess().getCreateAssignment_2_0()); }
		(rule__AssociationAction__CreateAssignment_2_0)
		{ after(grammarAccess.getAssociationActionAccess().getCreateAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssociationActionAccess().getGroup_2_1()); }
		(rule__AssociationAction__Group_2_1__0)
		{ after(grammarAccess.getAssociationActionAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditAssociation__TypeAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeSetCompatibleParserRuleCall_0_0()); }
		ruleSetCompatible
		{ after(grammarAccess.getEditAssociationAccess().getTypeSetCompatibleParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeSetVersionRangeParserRuleCall_0_1()); }
		ruleSetVersionRange
		{ after(grammarAccess.getEditAssociationAccess().getTypeSetVersionRangeParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeSetVariantParserRuleCall_0_2()); }
		ruleSetVariant
		{ after(grammarAccess.getEditAssociationAccess().getTypeSetVariantParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeSetRightOpenParserRuleCall_0_3()); }
		ruleSetRightOpen
		{ after(grammarAccess.getEditAssociationAccess().getTypeSetRightOpenParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeSetLeftOpenParserRuleCall_0_4()); }
		ruleSetLeftOpen
		{ after(grammarAccess.getEditAssociationAccess().getTypeSetLeftOpenParserRuleCall_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InheritanceAction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInheritanceActionAccess().getCreateAssignment_0()); }
		(rule__InheritanceAction__CreateAssignment_0)
		{ after(grammarAccess.getInheritanceActionAccess().getCreateAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getInheritanceActionAccess().getEditAssignment_1()); }
		(rule__InheritanceAction__EditAssignment_1)
		{ after(grammarAccess.getInheritanceActionAccess().getEditAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionActionAccess().getCreateAssignment_0()); }
		(rule__CompositionAction__CreateAssignment_0)
		{ after(grammarAccess.getCompositionActionAccess().getCreateAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompositionActionAccess().getEditAssignment_1()); }
		(rule__CompositionAction__EditAssignment_1)
		{ after(grammarAccess.getCompositionActionAccess().getEditAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getTheKeyword_0_0()); }
		The
		{ after(grammarAccess.getClassAccess().getTheKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassAccess().getAKeyword_0_1()); }
		A
		{ after(grammarAccess.getClassAccess().getAKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionParameter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionParameterAccess().getURIEnumLiteralDeclaration_0()); }
		(URI)
		{ after(grammarAccess.getCompositionParameterAccess().getURIEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompositionParameterAccess().getROLEEnumLiteralDeclaration_1()); }
		(Role)
		{ after(grammarAccess.getCompositionParameterAccess().getROLEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompositionParameterAccess().getTARGETEnumLiteralDeclaration_2()); }
		(Target)
		{ after(grammarAccess.getCompositionParameterAccess().getTARGETEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Publicity__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPublicityAccess().getPUBLICEnumLiteralDeclaration_0()); }
		(Public)
		{ after(grammarAccess.getPublicityAccess().getPUBLICEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPublicityAccess().getPRIVATEEnumLiteralDeclaration_1()); }
		(Private)
		{ after(grammarAccess.getPublicityAccess().getPRIVATEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PriorityValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityValueAccess().getSHOULDEnumLiteralDeclaration_0()); }
		(Should)
		{ after(grammarAccess.getPriorityValueAccess().getSHOULDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPriorityValueAccess().getMUSTEnumLiteralDeclaration_1()); }
		(Must)
		{ after(grammarAccess.getPriorityValueAccess().getMUSTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierValueAccess().getNAMEEnumLiteralDeclaration_0()); }
		(Name)
		{ after(grammarAccess.getIdentifierValueAccess().getNAMEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdentifierValueAccess().getURIEnumLiteralDeclaration_1()); }
		(URI)
		{ after(grammarAccess.getIdentifierValueAccess().getURIEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getWORDEnumLiteralDeclaration_0()); }
		(Time)
		{ after(grammarAccess.getDatatypeAccess().getWORDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getPHRASEEnumLiteralDeclaration_1()); }
		(Phrase)
		{ after(grammarAccess.getDatatypeAccess().getPHRASEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeAccess().getNUMBEREnumLiteralDeclaration_2()); }
		(Number)
		{ after(grammarAccess.getDatatypeAccess().getNUMBEREnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
	(rule__Statement__Alternatives_0)
	{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getFullStopKeyword_1()); }
	(FullStop)?
	{ after(grammarAccess.getStatementAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group__0__Impl
	rule__ChangeStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getTargetAssignment_0()); }
	(rule__ChangeStatement__TargetAssignment_0)
	{ after(grammarAccess.getChangeStatementAccess().getTargetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getAlternatives_1()); }
	(rule__ChangeStatement__Alternatives_1)
	{ after(grammarAccess.getChangeStatementAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeStatement__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group_1_0__0__Impl
	rule__ChangeStatement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getPriorityAssignment_1_0_0()); }
	(rule__ChangeStatement__PriorityAssignment_1_0_0)
	{ after(grammarAccess.getChangeStatementAccess().getPriorityAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group_1_0__1__Impl
	rule__ChangeStatement__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getNegationAssignment_1_0_1()); }
	(rule__ChangeStatement__NegationAssignment_1_0_1)?
	{ after(grammarAccess.getChangeStatementAccess().getNegationAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getAlternatives_1_0_2()); }
	(rule__ChangeStatement__Alternatives_1_0_2)
	{ after(grammarAccess.getChangeStatementAccess().getAlternatives_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChangeStatement__Group_1_0_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group_1_0_2_1__0__Impl
	rule__ChangeStatement__Group_1_0_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getHaveKeyword_1_0_2_1_0()); }
	Have
	{ after(grammarAccess.getChangeStatementAccess().getHaveKeyword_1_0_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group_1_0_2_1__1__Impl
	rule__ChangeStatement__Group_1_0_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getAlternatives_1_0_2_1_1()); }
	(rule__ChangeStatement__Alternatives_1_0_2_1_1)?
	{ after(grammarAccess.getChangeStatementAccess().getAlternatives_1_0_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChangeStatement__Group_1_0_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__Group_1_0_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChangeStatementAccess().getIdentifierAssignment_1_0_2_1_2()); }
	(rule__ChangeStatement__IdentifierAssignment_1_0_2_1_2)
	{ after(grammarAccess.getChangeStatementAccess().getIdentifierAssignment_1_0_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreationStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreationStatement__Group__0__Impl
	rule__CreationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreationStatementAccess().getClassElementAssignment_0()); }
	(rule__CreationStatement__ClassElementAssignment_0)
	{ after(grammarAccess.getCreationStatementAccess().getClassElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreationStatement__Group__1__Impl
	rule__CreationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreationStatementAccess().getPriorityAssignment_1()); }
	(rule__CreationStatement__PriorityAssignment_1)
	{ after(grammarAccess.getCreationStatementAccess().getPriorityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreationStatement__Group__2__Impl
	rule__CreationStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreationStatementAccess().getNegationAssignment_2()); }
	(rule__CreationStatement__NegationAssignment_2)?
	{ after(grammarAccess.getCreationStatementAccess().getNegationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreationStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreationStatementAccess().getAlternatives_3()); }
	(rule__CreationStatement__Alternatives_3)
	{ after(grammarAccess.getCreationStatementAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__0__Impl
	rule__UpdateAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getHasKeyword_0()); }
	Has
	{ after(grammarAccess.getUpdateActionAccess().getHasKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__1__Impl
	rule__UpdateAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getAlternatives_1()); }
	(rule__UpdateAction__Alternatives_1)
	{ after(grammarAccess.getUpdateActionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__2__Impl
	rule__UpdateAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getExistingKeyword_2()); }
	(Existing)?
	{ after(grammarAccess.getUpdateActionAccess().getExistingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__3__Impl
	rule__UpdateAction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getAttributeAssignment_3()); }
	(rule__UpdateAction__AttributeAssignment_3)
	{ after(grammarAccess.getUpdateActionAccess().getAttributeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__4__Impl
	rule__UpdateAction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getFullStopKeyword_4()); }
	FullStop
	{ after(grammarAccess.getUpdateActionAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__5__Impl
	rule__UpdateAction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getItKeyword_5()); }
	It
	{ after(grammarAccess.getUpdateActionAccess().getItKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__6__Impl
	rule__UpdateAction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getPriorityAssignment_6()); }
	(rule__UpdateAction__PriorityAssignment_6)
	{ after(grammarAccess.getUpdateActionAccess().getPriorityAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAction__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateActionAccess().getAlternatives_7()); }
	(rule__UpdateAction__Alternatives_7)
	{ after(grammarAccess.getUpdateActionAccess().getAlternatives_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateAttributeDatatype__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeDatatype__Group__0__Impl
	rule__UpdateAttributeDatatype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeDatatype__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeDatatypeAccess().getBeKeyword_0()); }
	Be
	{ after(grammarAccess.getUpdateAttributeDatatypeAccess().getBeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeDatatype__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeDatatype__Group__1__Impl
	rule__UpdateAttributeDatatype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeDatatype__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeDatatypeAccess().getAKeyword_1()); }
	A
	{ after(grammarAccess.getUpdateAttributeDatatypeAccess().getAKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeDatatype__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeDatatype__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeDatatype__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeDatatypeAccess().getTypeAssignment_2()); }
	(rule__UpdateAttributeDatatype__TypeAssignment_2)
	{ after(grammarAccess.getUpdateAttributeDatatypeAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateAttributeIdentifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeIdentifier__Group__0__Impl
	rule__UpdateAttributeIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getHaveKeyword_0()); }
	Have
	{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getHaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeIdentifier__Group__1__Impl
	rule__UpdateAttributeIdentifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getAlternatives_1()); }
	(rule__UpdateAttributeIdentifier__Alternatives_1)?
	{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeIdentifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getIdentifierAssignment_2()); }
	(rule__UpdateAttributeIdentifier__IdentifierAssignment_2)
	{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getIdentifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateAttributeValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeValue__Group__0__Impl
	rule__UpdateAttributeValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeValueAccess().getHaveKeyword_0()); }
	Have
	{ after(grammarAccess.getUpdateAttributeValueAccess().getHaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeValue__Group__1__Impl
	rule__UpdateAttributeValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeValueAccess().getAKeyword_1()); }
	(A)?
	{ after(grammarAccess.getUpdateAttributeValueAccess().getAKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeValue__Group__2__Impl
	rule__UpdateAttributeValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeValueAccess().getValueKeyword_2()); }
	Value
	{ after(grammarAccess.getUpdateAttributeValueAccess().getValueKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateAttributeValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateAttributeValueAccess().getValueAssignment_3()); }
	(rule__UpdateAttributeValue__ValueAssignment_3)
	{ after(grammarAccess.getUpdateAttributeValueAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group__0__Impl
	rule__AttributeAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getHaveKeyword_0()); }
	Have
	{ after(grammarAccess.getAttributeActionAccess().getHaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group__1__Impl
	rule__AttributeAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getAlternatives_1()); }
	(rule__AttributeAction__Alternatives_1)
	{ after(grammarAccess.getAttributeActionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group__2__Impl
	rule__AttributeAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getAttributeAssignment_2()); }
	(rule__AttributeAction__AttributeAssignment_2)
	{ after(grammarAccess.getAttributeActionAccess().getAttributeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group__3__Impl
	rule__AttributeAction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getFullStopKeyword_3()); }
	FullStop
	{ after(grammarAccess.getAttributeActionAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getGroup_4()); }
	(rule__AttributeAction__Group_4__0)?
	{ after(grammarAccess.getAttributeActionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeAction__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group_4__0__Impl
	rule__AttributeAction__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getItKeyword_4_0()); }
	It
	{ after(grammarAccess.getAttributeActionAccess().getItKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group_4__1__Impl
	rule__AttributeAction__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getIsKeyword_4_1()); }
	Is
	{ after(grammarAccess.getAttributeActionAccess().getIsKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group_4__2__Impl
	rule__AttributeAction__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getAKeyword_4_2()); }
	A
	{ after(grammarAccess.getAttributeActionAccess().getAKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeAction__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeActionAccess().getTypeAssignment_4_3()); }
	(rule__AttributeAction__TypeAssignment_4_3)
	{ after(grammarAccess.getAttributeActionAccess().getTypeAssignment_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociationAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationAction__Group__0__Impl
	rule__AssociationAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationActionAccess().getHaveKeyword_0()); }
	Have
	{ after(grammarAccess.getAssociationActionAccess().getHaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationAction__Group__1__Impl
	rule__AssociationAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationActionAccess().getAlternatives_1()); }
	(rule__AssociationAction__Alternatives_1)
	{ after(grammarAccess.getAssociationActionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationActionAccess().getAlternatives_2()); }
	(rule__AssociationAction__Alternatives_2)
	{ after(grammarAccess.getAssociationActionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociationAction__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationAction__Group_2_1__0__Impl
	rule__AssociationAction__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationActionAccess().getNameAssignment_2_1_0()); }
	(rule__AssociationAction__NameAssignment_2_1_0)
	{ after(grammarAccess.getAssociationActionAccess().getNameAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationAction__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationActionAccess().getEditAssignment_2_1_1()); }
	(rule__AssociationAction__EditAssignment_2_1_1)
	{ after(grammarAccess.getAssociationActionAccess().getEditAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateAssociation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateAssociation__Group__0__Impl
	rule__CreateAssociation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAssociationAccess().getToKeyword_0()); }
	To
	{ after(grammarAccess.getCreateAssociationAccess().getToKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateAssociation__Group__1__Impl
	rule__CreateAssociation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAssociationAccess().getOtherKeyword_1()); }
	(Other)?
	{ after(grammarAccess.getCreateAssociationAccess().getOtherKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateAssociation__Group__2__Impl
	rule__CreateAssociation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAssociationAccess().getTargetAssignment_2()); }
	(rule__CreateAssociation__TargetAssignment_2)
	{ after(grammarAccess.getCreateAssociationAccess().getTargetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateAssociation__Group__3__Impl
	rule__CreateAssociation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAssociationAccess().getCalledKeyword_3()); }
	Called
	{ after(grammarAccess.getCreateAssociationAccess().getCalledKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateAssociation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateAssociationAccess().getRelationAssignment_4()); }
	(rule__CreateAssociation__RelationAssignment_4)
	{ after(grammarAccess.getCreateAssociationAccess().getRelationAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetCompatible__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetCompatible__Group__0__Impl
	rule__SetCompatible__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetCompatibleAccess().getCompatibleKeyword_0()); }
	Compatible
	{ after(grammarAccess.getSetCompatibleAccess().getCompatibleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetCompatible__Group__1__Impl
	rule__SetCompatible__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetCompatibleAccess().getWithKeyword_1()); }
	With
	{ after(grammarAccess.getSetCompatibleAccess().getWithKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetCompatible__Group__2__Impl
	rule__SetCompatible__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetCompatibleAccess().getVersionKeyword_2()); }
	Version
	{ after(grammarAccess.getSetCompatibleAccess().getVersionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetCompatible__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetCompatibleAccess().getNameAssignment_3()); }
	(rule__SetCompatible__NameAssignment_3)
	{ after(grammarAccess.getSetCompatibleAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetVersionRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__0__Impl
	rule__SetVersionRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getWithKeyword_0()); }
	With
	{ after(grammarAccess.getSetVersionRangeAccess().getWithKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__1__Impl
	rule__SetVersionRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getVersionKeyword_1()); }
	Version
	{ after(grammarAccess.getSetVersionRangeAccess().getVersionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__2__Impl
	rule__SetVersionRange__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getRangeKeyword_2()); }
	Range
	{ after(grammarAccess.getSetVersionRangeAccess().getRangeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__3__Impl
	rule__SetVersionRange__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getFromKeyword_3()); }
	From
	{ after(grammarAccess.getSetVersionRangeAccess().getFromKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__4__Impl
	rule__SetVersionRange__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getStartAssignment_4()); }
	(rule__SetVersionRange__StartAssignment_4)
	{ after(grammarAccess.getSetVersionRangeAccess().getStartAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__5__Impl
	rule__SetVersionRange__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getToKeyword_5()); }
	To
	{ after(grammarAccess.getSetVersionRangeAccess().getToKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVersionRange__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVersionRangeAccess().getEndAssignment_6()); }
	(rule__SetVersionRange__EndAssignment_6)
	{ after(grammarAccess.getSetVersionRangeAccess().getEndAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetVariant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVariant__Group__0__Impl
	rule__SetVariant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVariantAccess().getWithKeyword_0()); }
	With
	{ after(grammarAccess.getSetVariantAccess().getWithKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVariant__Group__1__Impl
	rule__SetVariant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVariantAccess().getAllKeyword_1()); }
	All
	{ after(grammarAccess.getSetVariantAccess().getAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVariant__Group__2__Impl
	rule__SetVariant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVariantAccess().getVersionsKeyword_2()); }
	Versions
	{ after(grammarAccess.getSetVariantAccess().getVersionsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVariant__Group__3__Impl
	rule__SetVariant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVariantAccess().getOfKeyword_3()); }
	Of
	{ after(grammarAccess.getSetVariantAccess().getOfKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVariant__Group__4__Impl
	rule__SetVariant__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVariantAccess().getVariantKeyword_4()); }
	Variant
	{ after(grammarAccess.getSetVariantAccess().getVariantKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetVariant__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetVariantAccess().getNameAssignment_5()); }
	(rule__SetVariant__NameAssignment_5)
	{ after(grammarAccess.getSetVariantAccess().getNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetRightOpen__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRightOpen__Group__0__Impl
	rule__SetRightOpen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRightOpenAccess().getUpKeyword_0()); }
	Up
	{ after(grammarAccess.getSetRightOpenAccess().getUpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRightOpen__Group__1__Impl
	rule__SetRightOpen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRightOpenAccess().getToKeyword_1()); }
	To
	{ after(grammarAccess.getSetRightOpenAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRightOpen__Group__2__Impl
	rule__SetRightOpen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRightOpenAccess().getDateKeyword_2()); }
	Date
	{ after(grammarAccess.getSetRightOpenAccess().getDateKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetRightOpen__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetRightOpenAccess().getDateAssignment_3()); }
	(rule__SetRightOpen__DateAssignment_3)
	{ after(grammarAccess.getSetRightOpenAccess().getDateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLeftOpen__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLeftOpen__Group__0__Impl
	rule__SetLeftOpen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLeftOpenAccess().getStartingKeyword_0()); }
	Starting
	{ after(grammarAccess.getSetLeftOpenAccess().getStartingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLeftOpen__Group__1__Impl
	rule__SetLeftOpen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLeftOpenAccess().getFromKeyword_1()); }
	From
	{ after(grammarAccess.getSetLeftOpenAccess().getFromKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLeftOpen__Group__2__Impl
	rule__SetLeftOpen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLeftOpenAccess().getDateKeyword_2()); }
	Date
	{ after(grammarAccess.getSetLeftOpenAccess().getDateKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLeftOpen__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLeftOpenAccess().getDateAssignment_3()); }
	(rule__SetLeftOpen__DateAssignment_3)
	{ after(grammarAccess.getSetLeftOpenAccess().getDateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateInheritance__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateInheritance__Group__0__Impl
	rule__CreateInheritance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateInheritance__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateInheritanceAccess().getInheritKeyword_0()); }
	Inherit
	{ after(grammarAccess.getCreateInheritanceAccess().getInheritKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateInheritance__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateInheritance__Group__1__Impl
	rule__CreateInheritance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateInheritance__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateInheritanceAccess().getFromKeyword_1()); }
	From
	{ after(grammarAccess.getCreateInheritanceAccess().getFromKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateInheritance__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateInheritance__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateInheritance__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateInheritanceAccess().getParentAssignment_2()); }
	(rule__CreateInheritance__ParentAssignment_2)
	{ after(grammarAccess.getCreateInheritanceAccess().getParentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EditInheritance__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditInheritance__Group__0__Impl
	rule__EditInheritance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditInheritanceAccess().getHaveKeyword_0()); }
	Have
	{ after(grammarAccess.getEditInheritanceAccess().getHaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditInheritance__Group__1__Impl
	rule__EditInheritance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditInheritanceAccess().getInheritanceKeyword_1()); }
	Inheritance
	{ after(grammarAccess.getEditInheritanceAccess().getInheritanceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditInheritance__Group__2__Impl
	rule__EditInheritance__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditInheritanceAccess().getURIKeyword_2()); }
	URI
	{ after(grammarAccess.getEditInheritanceAccess().getURIKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditInheritance__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditInheritanceAccess().getUriAssignment_3()); }
	(rule__EditInheritance__UriAssignment_3)
	{ after(grammarAccess.getEditInheritanceAccess().getUriAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateComposition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group__0__Impl
	rule__CreateComposition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getComposeKeyword_0()); }
	Compose
	{ after(grammarAccess.getCreateCompositionAccess().getComposeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group__1__Impl
	rule__CreateComposition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getTargetAssignment_1()); }
	(rule__CreateComposition__TargetAssignment_1)
	{ after(grammarAccess.getCreateCompositionAccess().getTargetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group__2__Impl
	rule__CreateComposition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getCalledKeyword_2()); }
	Called
	{ after(grammarAccess.getCreateCompositionAccess().getCalledKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group__3__Impl
	rule__CreateComposition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getRelationAssignment_3()); }
	(rule__CreateComposition__RelationAssignment_3)
	{ after(grammarAccess.getCreateCompositionAccess().getRelationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getGroup_4()); }
	(rule__CreateComposition__Group_4__0)?
	{ after(grammarAccess.getCreateCompositionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateComposition__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group_4__0__Impl
	rule__CreateComposition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getFullStopKeyword_4_0()); }
	FullStop
	{ after(grammarAccess.getCreateCompositionAccess().getFullStopKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group_4__1__Impl
	rule__CreateComposition__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getItKeyword_4_1()); }
	It
	{ after(grammarAccess.getCreateCompositionAccess().getItKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group_4__2__Impl
	rule__CreateComposition__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getPriorityAssignment_4_2()); }
	(rule__CreateComposition__PriorityAssignment_4_2)
	{ after(grammarAccess.getCreateCompositionAccess().getPriorityAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group_4__3__Impl
	rule__CreateComposition__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getBeKeyword_4_3()); }
	Be
	{ after(grammarAccess.getCreateCompositionAccess().getBeKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateComposition__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateCompositionAccess().getPublicityAssignment_4_4()); }
	(rule__CreateComposition__PublicityAssignment_4_4)
	{ after(grammarAccess.getCreateCompositionAccess().getPublicityAssignment_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EditComposition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditComposition__Group__0__Impl
	rule__EditComposition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditCompositionAccess().getHaveKeyword_0()); }
	Have
	{ after(grammarAccess.getEditCompositionAccess().getHaveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditComposition__Group__1__Impl
	rule__EditComposition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditCompositionAccess().getCompositionKeyword_1()); }
	Composition
	{ after(grammarAccess.getEditCompositionAccess().getCompositionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditComposition__Group__2__Impl
	rule__EditComposition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditCompositionAccess().getCompositionNameAssignment_2()); }
	(rule__EditComposition__CompositionNameAssignment_2)
	{ after(grammarAccess.getEditCompositionAccess().getCompositionNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditComposition__Group__3__Impl
	rule__EditComposition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditCompositionAccess().getWithKeyword_3()); }
	With
	{ after(grammarAccess.getEditCompositionAccess().getWithKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditComposition__Group__4__Impl
	rule__EditComposition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditCompositionAccess().getParameterAssignment_4()); }
	(rule__EditComposition__ParameterAssignment_4)
	{ after(grammarAccess.getEditCompositionAccess().getParameterAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EditComposition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEditCompositionAccess().getNameAssignment_5()); }
	(rule__EditComposition__NameAssignment_5)
	{ after(grammarAccess.getEditCompositionAccess().getNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getAlternatives_0()); }
	(rule__Class__Alternatives_0)?
	{ after(grammarAccess.getClassAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getAbstractAssignment_1()); }
	(rule__Class__AbstractAssignment_1)?
	{ after(grammarAccess.getClassAccess().getAbstractAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_2()); }
	(Class)?
	{ after(grammarAccess.getClassAccess().getClassKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getNameAssignment_3()); }
	(rule__Class__NameAssignment_3)
	{ after(grammarAccess.getClassAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
	(Attribute)?
	{ after(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier__Group__0__Impl
	rule__Identifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierAccess().getValueAssignment_0()); }
	(rule__Identifier__ValueAssignment_0)
	{ after(grammarAccess.getIdentifierAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierAccess().getNameAssignment_1()); }
	(rule__Identifier__NameAssignment_1)
	{ after(grammarAccess.getIdentifierAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureRequest__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureRequestAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getFeatureRequestAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__TargetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getTargetClassParserRuleCall_0_0()); }
		ruleClass
		{ after(grammarAccess.getChangeStatementAccess().getTargetClassParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__PriorityAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getPriorityPriorityParserRuleCall_1_0_0_0()); }
		rulePriority
		{ after(grammarAccess.getChangeStatementAccess().getPriorityPriorityParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__NegationAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getNegationNotKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getChangeStatementAccess().getNegationNotKeyword_1_0_1_0()); }
			Not
			{ after(grammarAccess.getChangeStatementAccess().getNegationNotKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getChangeStatementAccess().getNegationNotKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__ActionAssignment_1_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getActionActionParserRuleCall_1_0_2_0_0()); }
		ruleAction
		{ after(grammarAccess.getChangeStatementAccess().getActionActionParserRuleCall_1_0_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__IdentifierAssignment_1_0_2_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getIdentifierIdentifierParserRuleCall_1_0_2_1_2_0()); }
		ruleIdentifier
		{ after(grammarAccess.getChangeStatementAccess().getIdentifierIdentifierParserRuleCall_1_0_2_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChangeStatement__UpdateAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChangeStatementAccess().getUpdateUpdateActionParserRuleCall_1_1_0()); }
		ruleUpdateAction
		{ after(grammarAccess.getChangeStatementAccess().getUpdateUpdateActionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__ClassElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreationStatementAccess().getClassElementClassParserRuleCall_0_0()); }
		ruleClass
		{ after(grammarAccess.getCreationStatementAccess().getClassElementClassParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__PriorityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreationStatementAccess().getPriorityPriorityParserRuleCall_1_0()); }
		rulePriority
		{ after(grammarAccess.getCreationStatementAccess().getPriorityPriorityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreationStatement__NegationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreationStatementAccess().getNegationNotKeyword_2_0()); }
		(
			{ before(grammarAccess.getCreationStatementAccess().getNegationNotKeyword_2_0()); }
			Not
			{ after(grammarAccess.getCreationStatementAccess().getNegationNotKeyword_2_0()); }
		)
		{ after(grammarAccess.getCreationStatementAccess().getNegationNotKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getTypeAlternatives_0()); }
		(rule__Action__TypeAlternatives_0)
		{ after(grammarAccess.getActionAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__AttributeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getAttributeAttributeParserRuleCall_3_0()); }
		ruleAttribute
		{ after(grammarAccess.getUpdateActionAccess().getAttributeAttributeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__PriorityAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getPriorityPriorityParserRuleCall_6_0()); }
		rulePriority
		{ after(grammarAccess.getUpdateActionAccess().getPriorityPriorityParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__DatatypeAssignment_7_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getDatatypeUpdateAttributeDatatypeParserRuleCall_7_0_0()); }
		ruleUpdateAttributeDatatype
		{ after(grammarAccess.getUpdateActionAccess().getDatatypeUpdateAttributeDatatypeParserRuleCall_7_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__IdentifierAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getIdentifierUpdateAttributeIdentifierParserRuleCall_7_1_0()); }
		ruleUpdateAttributeIdentifier
		{ after(grammarAccess.getUpdateActionAccess().getIdentifierUpdateAttributeIdentifierParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAction__ValueAssignment_7_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateActionAccess().getValueUpdateAttributeValueParserRuleCall_7_2_0()); }
		ruleUpdateAttributeValue
		{ after(grammarAccess.getUpdateActionAccess().getValueUpdateAttributeValueParserRuleCall_7_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeDatatype__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAttributeDatatypeAccess().getTypeDatatypeEnumRuleCall_2_0()); }
		ruleDatatype
		{ after(grammarAccess.getUpdateAttributeDatatypeAccess().getTypeDatatypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeIdentifier__IdentifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAttributeIdentifierAccess().getIdentifierIdentifierParserRuleCall_2_0()); }
		ruleIdentifier
		{ after(grammarAccess.getUpdateAttributeIdentifierAccess().getIdentifierIdentifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateAttributeValue__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateAttributeValueAccess().getValueIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getUpdateAttributeValueAccess().getValueIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__AttributeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeActionAccess().getAttributeAttributeParserRuleCall_2_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributeActionAccess().getAttributeAttributeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeAction__TypeAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeActionAccess().getTypeDatatypeEnumRuleCall_4_3_0()); }
		ruleDatatype
		{ after(grammarAccess.getAttributeActionAccess().getTypeDatatypeEnumRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__CreateAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationActionAccess().getCreateCreateAssociationParserRuleCall_2_0_0()); }
		ruleCreateAssociation
		{ after(grammarAccess.getAssociationActionAccess().getCreateCreateAssociationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__NameAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationActionAccess().getNameIDTerminalRuleCall_2_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAssociationActionAccess().getNameIDTerminalRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationAction__EditAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationActionAccess().getEditEditAssociationParserRuleCall_2_1_1_0()); }
		ruleEditAssociation
		{ after(grammarAccess.getAssociationActionAccess().getEditEditAssociationParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__TargetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateAssociationAccess().getTargetClassParserRuleCall_2_0()); }
		ruleClass
		{ after(grammarAccess.getCreateAssociationAccess().getTargetClassParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateAssociation__RelationAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateAssociationAccess().getRelationIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getCreateAssociationAccess().getRelationIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditAssociation__TypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditAssociationAccess().getTypeAlternatives_0()); }
		(rule__EditAssociation__TypeAlternatives_0)
		{ after(grammarAccess.getEditAssociationAccess().getTypeAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetCompatible__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetCompatibleAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getSetCompatibleAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__StartAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetVersionRangeAccess().getStartIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getSetVersionRangeAccess().getStartIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVersionRange__EndAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetVersionRangeAccess().getEndIDTerminalRuleCall_6_0()); }
		RULE_ID
		{ after(grammarAccess.getSetVersionRangeAccess().getEndIDTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetVariant__NameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetVariantAccess().getNameIDTerminalRuleCall_5_0()); }
		RULE_ID
		{ after(grammarAccess.getSetVariantAccess().getNameIDTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetRightOpen__DateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetRightOpenAccess().getDateIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getSetRightOpenAccess().getDateIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLeftOpen__DateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetLeftOpenAccess().getDateIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getSetLeftOpenAccess().getDateIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InheritanceAction__CreateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInheritanceActionAccess().getCreateCreateInheritanceParserRuleCall_0_0()); }
		ruleCreateInheritance
		{ after(grammarAccess.getInheritanceActionAccess().getCreateCreateInheritanceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InheritanceAction__EditAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInheritanceActionAccess().getEditEditInheritanceParserRuleCall_1_0()); }
		ruleEditInheritance
		{ after(grammarAccess.getInheritanceActionAccess().getEditEditInheritanceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateInheritance__ParentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateInheritanceAccess().getParentClassParserRuleCall_2_0()); }
		ruleClass
		{ after(grammarAccess.getCreateInheritanceAccess().getParentClassParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditInheritance__UriAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditInheritanceAccess().getUriIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getEditInheritanceAccess().getUriIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAction__CreateAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionActionAccess().getCreateCreateCompositionParserRuleCall_0_0()); }
		ruleCreateComposition
		{ after(grammarAccess.getCompositionActionAccess().getCreateCreateCompositionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAction__EditAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionActionAccess().getEditEditCompositionParserRuleCall_1_0()); }
		ruleEditComposition
		{ after(grammarAccess.getCompositionActionAccess().getEditEditCompositionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__TargetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateCompositionAccess().getTargetClassParserRuleCall_1_0()); }
		ruleClass
		{ after(grammarAccess.getCreateCompositionAccess().getTargetClassParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__RelationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateCompositionAccess().getRelationIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getCreateCompositionAccess().getRelationIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__PriorityAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateCompositionAccess().getPriorityPriorityParserRuleCall_4_2_0()); }
		rulePriority
		{ after(grammarAccess.getCreateCompositionAccess().getPriorityPriorityParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateComposition__PublicityAssignment_4_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateCompositionAccess().getPublicityPublicityEnumRuleCall_4_4_0()); }
		rulePublicity
		{ after(grammarAccess.getCreateCompositionAccess().getPublicityPublicityEnumRuleCall_4_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__CompositionNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditCompositionAccess().getCompositionNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEditCompositionAccess().getCompositionNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__ParameterAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditCompositionAccess().getParameterCompositionParameterEnumRuleCall_4_0()); }
		ruleCompositionParameter
		{ after(grammarAccess.getEditCompositionAccess().getParameterCompositionParameterEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditComposition__NameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditCompositionAccess().getNameIDTerminalRuleCall_5_0()); }
		RULE_ID
		{ after(grammarAccess.getEditCompositionAccess().getNameIDTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__AbstractAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getAbstractAbstractionEnumRuleCall_1_0()); }
		ruleAbstraction
		{ after(grammarAccess.getClassAccess().getAbstractAbstractionEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getValueIdentifierValueEnumRuleCall_0_0()); }
		ruleIdentifierValue
		{ after(grammarAccess.getIdentifierAccess().getValueIdentifierValueEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Priority__PriorityAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPriorityAccess().getPriorityPriorityValueEnumRuleCall_0()); }
		rulePriorityValue
		{ after(grammarAccess.getPriorityAccess().getPriorityPriorityValueEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
