/*
 * generated by Xtext 2.30.0
 */
package de.tud.st.featurelang.serializer;

import com.google.inject.Inject;
import de.tud.st.featurelang.services.FeatureLangGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class FeatureLangSyntacticSequencer extends AbstractSyntacticSequencer {

	protected FeatureLangGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_AttributeKeyword_0_0_or_AttributeKeyword_0_1;
	protected AbstractElementAlias match_Class_TheKeyword_0_q;
	protected AbstractElementAlias match_Statement_FullStopKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (FeatureLangGrammarAccess) access;
		match_Attribute_AttributeKeyword_0_0_or_AttributeKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAttributeAccess().getAttributeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAttributeAccess().getAttributeKeyword_0_1()));
		match_Class_TheKeyword_0_q = new TokenAlias(false, true, grammarAccess.getClassAccess().getTheKeyword_0());
		match_Statement_FullStopKeyword_2_q = new TokenAlias(false, true, grammarAccess.getStatementAccess().getFullStopKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Attribute_AttributeKeyword_0_0_or_AttributeKeyword_0_1.equals(syntax))
				emit_Attribute_AttributeKeyword_0_0_or_AttributeKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Class_TheKeyword_0_q.equals(syntax))
				emit_Class_TheKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_FullStopKeyword_2_q.equals(syntax))
				emit_Statement_FullStopKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Attribute' | 'attribute'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_Attribute_AttributeKeyword_0_0_or_AttributeKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'the'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'class' name=ID
	 
	 * </pre>
	 */
	protected void emit_Class_TheKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '.'?
	 *
	 * This ambiguous syntax occurs at:
	 *     action=Action (ambiguity) (rule end)
	 *     update=UpdateAction (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Statement_FullStopKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
