/*
 * generated by Xtext 2.30.0
 */
package de.tud.st.featurelang.serializer;

import com.google.inject.Inject;
import de.tud.st.featurelang.featureLang.AssociationAction;
import de.tud.st.featurelang.featureLang.Attribute;
import de.tud.st.featurelang.featureLang.AttributeAction;
import de.tud.st.featurelang.featureLang.ChangeStatement;
import de.tud.st.featurelang.featureLang.CreationStatement;
import de.tud.st.featurelang.featureLang.FeatureLangPackage;
import de.tud.st.featurelang.featureLang.FeatureRequest;
import de.tud.st.featurelang.featureLang.InheritanceAction;
import de.tud.st.featurelang.featureLang.Priority;
import de.tud.st.featurelang.featureLang.UpdateAction;
import de.tud.st.featurelang.services.FeatureLangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FeatureLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FeatureLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FeatureLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FeatureLangPackage.ACTION:
				sequence_Action(context, (de.tud.st.featurelang.featureLang.Action) semanticObject); 
				return; 
			case FeatureLangPackage.ASSOCIATION_ACTION:
				sequence_AssociationAction(context, (AssociationAction) semanticObject); 
				return; 
			case FeatureLangPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case FeatureLangPackage.ATTRIBUTE_ACTION:
				sequence_AttributeAction(context, (AttributeAction) semanticObject); 
				return; 
			case FeatureLangPackage.CHANGE_STATEMENT:
				sequence_ChangeStatement(context, (ChangeStatement) semanticObject); 
				return; 
			case FeatureLangPackage.CLASS:
				sequence_Class(context, (de.tud.st.featurelang.featureLang.Class) semanticObject); 
				return; 
			case FeatureLangPackage.CREATION_STATEMENT:
				sequence_CreationStatement(context, (CreationStatement) semanticObject); 
				return; 
			case FeatureLangPackage.FEATURE_REQUEST:
				sequence_FeatureRequest(context, (FeatureRequest) semanticObject); 
				return; 
			case FeatureLangPackage.INHERITANCE_ACTION:
				sequence_InheritanceAction(context, (InheritanceAction) semanticObject); 
				return; 
			case FeatureLangPackage.PRIORITY:
				sequence_Priority(context, (Priority) semanticObject); 
				return; 
			case FeatureLangPackage.UPDATE_ACTION:
				sequence_UpdateAction(context, (UpdateAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (type=AttributeAction | type=AssociationAction | type=InheritanceAction)
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, de.tud.st.featurelang.featureLang.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AssociationAction returns AssociationAction
	 *
	 * Constraint:
	 *     (target=Class relation=ID)
	 * </pre>
	 */
	protected void sequence_AssociationAction(ISerializationContext context, AssociationAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.ASSOCIATION_ACTION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.ASSOCIATION_ACTION__TARGET));
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.ASSOCIATION_ACTION__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.ASSOCIATION_ACTION__RELATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociationActionAccess().getTargetClassParserRuleCall_4_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getAssociationActionAccess().getRelationIDTerminalRuleCall_6_0(), semanticObject.getRelation());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeAction returns AttributeAction
	 *
	 * Constraint:
	 *     (attribute=Attribute type=Datatype?)
	 * </pre>
	 */
	protected void sequence_AttributeAction(ISerializationContext context, AttributeAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ChangeStatement
	 *     ChangeStatement returns ChangeStatement
	 *
	 * Constraint:
	 *     (target=Class ((priority=Priority negation?='not'? action=Action) | update=UpdateAction))
	 * </pre>
	 */
	protected void sequence_ChangeStatement(ISerializationContext context, ChangeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Class(ISerializationContext context, de.tud.st.featurelang.featureLang.Class semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.CLASS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.CLASS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns CreationStatement
	 *     CreationStatement returns CreationStatement
	 *
	 * Constraint:
	 *     (classElement=Class priority=Priority negation?='not'?)
	 * </pre>
	 */
	protected void sequence_CreationStatement(ISerializationContext context, CreationStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FeatureRequest returns FeatureRequest
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_FeatureRequest(ISerializationContext context, FeatureRequest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InheritanceAction returns InheritanceAction
	 *
	 * Constraint:
	 *     parent=Class
	 * </pre>
	 */
	protected void sequence_InheritanceAction(ISerializationContext context, InheritanceAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.INHERITANCE_ACTION__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.INHERITANCE_ACTION__PARENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInheritanceActionAccess().getParentClassParserRuleCall_2_0(), semanticObject.getParent());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Priority returns Priority
	 *
	 * Constraint:
	 *     priority=PriorityValue
	 * </pre>
	 */
	protected void sequence_Priority(ISerializationContext context, Priority semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.PRIORITY__PRIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.PRIORITY__PRIORITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPriorityAccess().getPriorityPriorityValueEnumRuleCall_0(), semanticObject.getPriority());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UpdateAction returns UpdateAction
	 *
	 * Constraint:
	 *     (attribute=Attribute priority=Priority type=Datatype)
	 * </pre>
	 */
	protected void sequence_UpdateAction(ISerializationContext context, UpdateAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.UPDATE_ACTION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.UPDATE_ACTION__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.UPDATE_ACTION__PRIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.UPDATE_ACTION__PRIORITY));
			if (transientValues.isValueTransient(semanticObject, FeatureLangPackage.Literals.UPDATE_ACTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLangPackage.Literals.UPDATE_ACTION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateActionAccess().getAttributeAttributeParserRuleCall_3_0(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getUpdateActionAccess().getPriorityPriorityParserRuleCall_6_0(), semanticObject.getPriority());
		feeder.accept(grammarAccess.getUpdateActionAccess().getTypeDatatypeEnumRuleCall_9_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
