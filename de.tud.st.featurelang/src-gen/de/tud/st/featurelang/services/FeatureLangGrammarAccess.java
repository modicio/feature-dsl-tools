/*
 * generated by Xtext 2.32.0
 */
package de.tud.st.featurelang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FeatureLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FeatureRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.FeatureRequest");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//FeatureRequest:
		//    (statements+= Statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(statements+= Statement)*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cChangeStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cCreationStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//    (ChangeStatement | CreationStatement) ('.')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ChangeStatement | CreationStatement) ('.')?
		public Group getGroup() { return cGroup; }
		
		//(ChangeStatement | CreationStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ChangeStatement
		public RuleCall getChangeStatementParserRuleCall_0_0() { return cChangeStatementParserRuleCall_0_0; }
		
		//CreationStatement
		public RuleCall getCreationStatementParserRuleCall_0_1() { return cCreationStatementParserRuleCall_0_1; }
		
		//('.')?
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class ChangeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.ChangeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cTargetAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cTargetClassParserRuleCall_0_0_0_0 = (RuleCall)cTargetAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cPriorityAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cPriorityPriorityParserRuleCall_0_0_1_0_0 = (RuleCall)cPriorityAssignment_0_0_1_0.eContents().get(0);
		private final Assignment cNegationAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final Keyword cNegationNotKeyword_0_0_1_1_0 = (Keyword)cNegationAssignment_0_0_1_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cSetKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cChangeKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final Assignment cNegationAssignment_0_1_0_2 = (Assignment)cAlternatives_0_1_0.eContents().get(2);
		private final Keyword cNegationRemoveKeyword_0_1_0_2_0 = (Keyword)cNegationAssignment_0_1_0_2.eContents().get(0);
		private final Keyword cInKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTargetAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cTargetClassParserRuleCall_0_1_2_0 = (RuleCall)cTargetAssignment_0_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_1_0_0 = (RuleCall)cActionAssignment_1_0.eContents().get(0);
		private final Assignment cUpdateAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUpdateUpdateActionParserRuleCall_1_1_0 = (RuleCall)cUpdateAssignment_1_1.eContents().get(0);
		
		//ChangeStatement hidden(WS):
		//    ((target=Class
		//    (priority=Priority (negation ?= 'not')?)?) | (('set' | 'change' | negation ?= 'remove') 'in' target=Class))
		//    (action=Action | update=UpdateAction)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((target=Class
		//(priority=Priority (negation ?= 'not')?)?) | (('set' | 'change' | negation ?= 'remove') 'in' target=Class))
		//(action=Action | update=UpdateAction)
		public Group getGroup() { return cGroup; }
		
		//((target=Class
		//(priority=Priority (negation ?= 'not')?)?) | (('set' | 'change' | negation ?= 'remove') 'in' target=Class))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(target=Class
		//    (priority=Priority (negation ?= 'not')?)?)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//target=Class
		public Assignment getTargetAssignment_0_0_0() { return cTargetAssignment_0_0_0; }
		
		//Class
		public RuleCall getTargetClassParserRuleCall_0_0_0_0() { return cTargetClassParserRuleCall_0_0_0_0; }
		
		//(priority=Priority (negation ?= 'not')?)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//priority=Priority
		public Assignment getPriorityAssignment_0_0_1_0() { return cPriorityAssignment_0_0_1_0; }
		
		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_0_0_1_0_0() { return cPriorityPriorityParserRuleCall_0_0_1_0_0; }
		
		//(negation ?= 'not')?
		public Assignment getNegationAssignment_0_0_1_1() { return cNegationAssignment_0_0_1_1; }
		
		//'not'
		public Keyword getNegationNotKeyword_0_0_1_1_0() { return cNegationNotKeyword_0_0_1_1_0; }
		
		//(('set' | 'change' | negation ?= 'remove') 'in' target=Class)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//('set' | 'change' | negation ?= 'remove')
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//'set'
		public Keyword getSetKeyword_0_1_0_0() { return cSetKeyword_0_1_0_0; }
		
		//'change'
		public Keyword getChangeKeyword_0_1_0_1() { return cChangeKeyword_0_1_0_1; }
		
		//negation ?= 'remove'
		public Assignment getNegationAssignment_0_1_0_2() { return cNegationAssignment_0_1_0_2; }
		
		//'remove'
		public Keyword getNegationRemoveKeyword_0_1_0_2_0() { return cNegationRemoveKeyword_0_1_0_2_0; }
		
		//'in'
		public Keyword getInKeyword_0_1_1() { return cInKeyword_0_1_1; }
		
		//target=Class
		public Assignment getTargetAssignment_0_1_2() { return cTargetAssignment_0_1_2; }
		
		//Class
		public RuleCall getTargetClassParserRuleCall_0_1_2_0() { return cTargetClassParserRuleCall_0_1_2_0; }
		
		//(action=Action | update=UpdateAction)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//action=Action
		public Assignment getActionAssignment_1_0() { return cActionAssignment_1_0; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0_0() { return cActionActionParserRuleCall_1_0_0; }
		
		//update=UpdateAction
		public Assignment getUpdateAssignment_1_1() { return cUpdateAssignment_1_1; }
		
		//UpdateAction
		public RuleCall getUpdateUpdateActionParserRuleCall_1_1_0() { return cUpdateUpdateActionParserRuleCall_1_1_0; }
	}
	public class CreationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.CreationStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cClassElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cClassElementClassParserRuleCall_0_0_0 = (RuleCall)cClassElementAssignment_0_0.eContents().get(0);
		private final Assignment cPriorityAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPriorityPriorityParserRuleCall_0_1_0 = (RuleCall)cPriorityAssignment_0_1.eContents().get(0);
		private final Assignment cNegationAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cNegationNotKeyword_0_2_0 = (Keyword)cNegationAssignment_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Keyword cExistKeyword_0_3_0 = (Keyword)cAlternatives_0_3.eContents().get(0);
		private final Keyword cBeKeyword_0_3_1 = (Keyword)cAlternatives_0_3.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cCreateKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Assignment cNegationAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cNegationDeleteKeyword_1_0_1_0 = (Keyword)cNegationAssignment_1_0_1.eContents().get(0);
		private final Assignment cClassElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassElementClassParserRuleCall_1_1_0 = (RuleCall)cClassElementAssignment_1_1.eContents().get(0);
		
		//CreationStatement hidden(WS):
		//    ((classElement=Class priority=Priority (negation ?= 'not')? ('exist' | 'be')) |
		//        ('create' | negation ?= 'delete') classElement=Class)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((classElement=Class priority=Priority (negation ?= 'not')? ('exist' | 'be')) |
		//    ('create' | negation ?= 'delete') classElement=Class)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(classElement=Class priority=Priority (negation ?= 'not')? ('exist' | 'be'))
		public Group getGroup_0() { return cGroup_0; }
		
		//classElement=Class
		public Assignment getClassElementAssignment_0_0() { return cClassElementAssignment_0_0; }
		
		//Class
		public RuleCall getClassElementClassParserRuleCall_0_0_0() { return cClassElementClassParserRuleCall_0_0_0; }
		
		//priority=Priority
		public Assignment getPriorityAssignment_0_1() { return cPriorityAssignment_0_1; }
		
		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_0_1_0() { return cPriorityPriorityParserRuleCall_0_1_0; }
		
		//(negation ?= 'not')?
		public Assignment getNegationAssignment_0_2() { return cNegationAssignment_0_2; }
		
		//'not'
		public Keyword getNegationNotKeyword_0_2_0() { return cNegationNotKeyword_0_2_0; }
		
		//('exist' | 'be')
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//'exist'
		public Keyword getExistKeyword_0_3_0() { return cExistKeyword_0_3_0; }
		
		//'be'
		public Keyword getBeKeyword_0_3_1() { return cBeKeyword_0_3_1; }
		
		//('create' | negation ?= 'delete') classElement=Class
		public Group getGroup_1() { return cGroup_1; }
		
		//('create' | negation ?= 'delete')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'create'
		public Keyword getCreateKeyword_1_0_0() { return cCreateKeyword_1_0_0; }
		
		//negation ?= 'delete'
		public Assignment getNegationAssignment_1_0_1() { return cNegationAssignment_1_0_1; }
		
		//'delete'
		public Keyword getNegationDeleteKeyword_1_0_1_0() { return cNegationDeleteKeyword_1_0_1_0; }
		
		//classElement=Class
		public Assignment getClassElementAssignment_1_1() { return cClassElementAssignment_1_1; }
		
		//Class
		public RuleCall getClassElementClassParserRuleCall_1_1_0() { return cClassElementClassParserRuleCall_1_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Action");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeAttributeActionParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeAssociationActionParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeInheritanceActionParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeCompositionActionParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		
		//Action hidden(WS):
		//    type=(AttributeAction | AssociationAction | InheritanceAction | CompositionAction)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=(AttributeAction | AssociationAction | InheritanceAction | CompositionAction)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(AttributeAction | AssociationAction | InheritanceAction | CompositionAction)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//AttributeAction
		public RuleCall getTypeAttributeActionParserRuleCall_0_0() { return cTypeAttributeActionParserRuleCall_0_0; }
		
		//AssociationAction
		public RuleCall getTypeAssociationActionParserRuleCall_0_1() { return cTypeAssociationActionParserRuleCall_0_1; }
		
		//InheritanceAction
		public RuleCall getTypeInheritanceActionParserRuleCall_0_2() { return cTypeInheritanceActionParserRuleCall_0_2; }
		
		//CompositionAction
		public RuleCall getTypeCompositionActionParserRuleCall_0_3() { return cTypeCompositionActionParserRuleCall_0_3; }
	}
	public class UpdateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.UpdateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAnKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cTheKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cExistingKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cCreatedKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeAttributeParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cItKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPriorityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPriorityPriorityParserRuleCall_6_0 = (RuleCall)cPriorityAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cDatatypeAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cDatatypeUpdateAttributeDatatypeParserRuleCall_7_0_0 = (RuleCall)cDatatypeAssignment_7_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cIdentifierUpdateAttributeIdentifierParserRuleCall_7_1_0 = (RuleCall)cIdentifierAssignment_7_1.eContents().get(0);
		private final Assignment cValueAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cValueUpdateAttributeValueParserRuleCall_7_2_0 = (RuleCall)cValueAssignment_7_2.eContents().get(0);
		
		//UpdateAction hidden(WS):
		//    ('has')? ('an' | 'a' | 'the') ('existing' | 'created')
		//    attribute=Attribute '.' 'it' priority=Priority (datatype=UpdateAttributeDatatype |
		//                                                    identifier=UpdateAttributeIdentifier |
		//                                                    value=UpdateAttributeValue
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('has')? ('an' | 'a' | 'the') ('existing' | 'created')
		//attribute=Attribute '.' 'it' priority=Priority (datatype=UpdateAttributeDatatype |
		//                                                identifier=UpdateAttributeIdentifier |
		//                                                value=UpdateAttributeValue
		//)
		public Group getGroup() { return cGroup; }
		
		//('has')?
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }
		
		//('an' | 'a' | 'the')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'an'
		public Keyword getAnKeyword_1_0() { return cAnKeyword_1_0; }
		
		//'a'
		public Keyword getAKeyword_1_1() { return cAKeyword_1_1; }
		
		//'the'
		public Keyword getTheKeyword_1_2() { return cTheKeyword_1_2; }
		
		//('existing' | 'created')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'existing'
		public Keyword getExistingKeyword_2_0() { return cExistingKeyword_2_0; }
		
		//'created'
		public Keyword getCreatedKeyword_2_1() { return cCreatedKeyword_2_1; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_3_0() { return cAttributeAttributeParserRuleCall_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//'it'
		public Keyword getItKeyword_5() { return cItKeyword_5; }
		
		//priority=Priority
		public Assignment getPriorityAssignment_6() { return cPriorityAssignment_6; }
		
		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_6_0() { return cPriorityPriorityParserRuleCall_6_0; }
		
		//(datatype=UpdateAttributeDatatype |
		//                                                   identifier=UpdateAttributeIdentifier |
		//                                                   value=UpdateAttributeValue
		//   )
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//datatype=UpdateAttributeDatatype
		public Assignment getDatatypeAssignment_7_0() { return cDatatypeAssignment_7_0; }
		
		//UpdateAttributeDatatype
		public RuleCall getDatatypeUpdateAttributeDatatypeParserRuleCall_7_0_0() { return cDatatypeUpdateAttributeDatatypeParserRuleCall_7_0_0; }
		
		//identifier=UpdateAttributeIdentifier
		public Assignment getIdentifierAssignment_7_1() { return cIdentifierAssignment_7_1; }
		
		//UpdateAttributeIdentifier
		public RuleCall getIdentifierUpdateAttributeIdentifierParserRuleCall_7_1_0() { return cIdentifierUpdateAttributeIdentifierParserRuleCall_7_1_0; }
		
		//value=UpdateAttributeValue
		public Assignment getValueAssignment_7_2() { return cValueAssignment_7_2; }
		
		//UpdateAttributeValue
		public RuleCall getValueUpdateAttributeValueParserRuleCall_7_2_0() { return cValueUpdateAttributeValueParserRuleCall_7_2_0; }
	}
	public class UpdateAttributeDatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.UpdateAttributeDatatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDatatypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cInsteadKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOldTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOldTypeDatatypeEnumRuleCall_5_0 = (RuleCall)cOldTypeAssignment_5.eContents().get(0);
		
		//UpdateAttributeDatatype hidden (WS):
		//    'be' 'a' type=Datatype 'instead' 'of' oldType=Datatype
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'be' 'a' type=Datatype 'instead' 'of' oldType=Datatype
		public Group getGroup() { return cGroup; }
		
		//'be'
		public Keyword getBeKeyword_0() { return cBeKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//type=Datatype
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Datatype
		public RuleCall getTypeDatatypeEnumRuleCall_2_0() { return cTypeDatatypeEnumRuleCall_2_0; }
		
		//'instead'
		public Keyword getInsteadKeyword_3() { return cInsteadKeyword_3; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//oldType=Datatype
		public Assignment getOldTypeAssignment_5() { return cOldTypeAssignment_5; }
		
		//Datatype
		public RuleCall getOldTypeDatatypeEnumRuleCall_5_0() { return cOldTypeDatatypeEnumRuleCall_5_0; }
	}
	public class UpdateAttributeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.UpdateAttributeIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAnKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIdentifierParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Keyword cInsteadKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOldIdentifierAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOldIdentifierIdentifierParserRuleCall_5_0 = (RuleCall)cOldIdentifierAssignment_5.eContents().get(0);
		
		//UpdateAttributeIdentifier hidden (WS):
		//    'have' ('a' | 'an')? identifier=Identifier 'instead' 'of' oldIdentifier=Identifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'have' ('a' | 'an')? identifier=Identifier 'instead' 'of' oldIdentifier=Identifier
		public Group getGroup() { return cGroup; }
		
		//'have'
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//('a' | 'an')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'a'
		public Keyword getAKeyword_1_0() { return cAKeyword_1_0; }
		
		//'an'
		public Keyword getAnKeyword_1_1() { return cAnKeyword_1_1; }
		
		//identifier=Identifier
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//Identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_2_0() { return cIdentifierIdentifierParserRuleCall_2_0; }
		
		//'instead'
		public Keyword getInsteadKeyword_3() { return cInsteadKeyword_3; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//oldIdentifier=Identifier
		public Assignment getOldIdentifierAssignment_5() { return cOldIdentifierAssignment_5; }
		
		//Identifier
		public RuleCall getOldIdentifierIdentifierParserRuleCall_5_0() { return cOldIdentifierIdentifierParserRuleCall_5_0; }
	}
	public class UpdateAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.UpdateAttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAttributeValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cInsteadKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOldValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOldValueAttributeValueParserRuleCall_6_0 = (RuleCall)cOldValueAssignment_6.eContents().get(0);
		
		//UpdateAttributeValue hidden (WS):
		//    'have' ('a')? 'value' value=AttributeValue 'instead' 'of' oldValue=AttributeValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'have' ('a')? 'value' value=AttributeValue 'instead' 'of' oldValue=AttributeValue
		public Group getGroup() { return cGroup; }
		
		//'have'
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//('a')?
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=AttributeValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//AttributeValue
		public RuleCall getValueAttributeValueParserRuleCall_3_0() { return cValueAttributeValueParserRuleCall_3_0; }
		
		//'instead'
		public Keyword getInsteadKeyword_4() { return cInsteadKeyword_4; }
		
		//'of'
		public Keyword getOfKeyword_5() { return cOfKeyword_5; }
		
		//oldValue=AttributeValue
		public Assignment getOldValueAssignment_6() { return cOldValueAssignment_6; }
		
		//AttributeValue
		public RuleCall getOldValueAttributeValueParserRuleCall_6_0() { return cOldValueAttributeValueParserRuleCall_6_0; }
	}
	public class AttributeActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.AttributeAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAnKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cAKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeAttributeParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cItKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cIsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cAKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cTypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cTypeDatatypeEnumRuleCall_3_4_0 = (RuleCall)cTypeAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cItKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cHasKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cAKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cValueKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cValueAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cValueAttributeValueParserRuleCall_4_5_0 = (RuleCall)cValueAssignment_4_5.eContents().get(0);
		
		//AttributeAction hidden(WS):
		//    ('have')? ('the' | 'an' | 'a') attribute=Attribute
		//    ('.' 'it' 'is' 'a' type=Datatype)?
		//    ('.' 'it' 'has' ('a')? 'value' value=AttributeValue)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('have')? ('the' | 'an' | 'a') attribute=Attribute
		//('.' 'it' 'is' 'a' type=Datatype)?
		//('.' 'it' 'has' ('a')? 'value' value=AttributeValue)?
		public Group getGroup() { return cGroup; }
		
		//('have')?
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//('the' | 'an' | 'a')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'the'
		public Keyword getTheKeyword_1_0() { return cTheKeyword_1_0; }
		
		//'an'
		public Keyword getAnKeyword_1_1() { return cAnKeyword_1_1; }
		
		//'a'
		public Keyword getAKeyword_1_2() { return cAKeyword_1_2; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_2_0() { return cAttributeAttributeParserRuleCall_2_0; }
		
		//('.' 'it' 'is' 'a' type=Datatype)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//'it'
		public Keyword getItKeyword_3_1() { return cItKeyword_3_1; }
		
		//'is'
		public Keyword getIsKeyword_3_2() { return cIsKeyword_3_2; }
		
		//'a'
		public Keyword getAKeyword_3_3() { return cAKeyword_3_3; }
		
		//type=Datatype
		public Assignment getTypeAssignment_3_4() { return cTypeAssignment_3_4; }
		
		//Datatype
		public RuleCall getTypeDatatypeEnumRuleCall_3_4_0() { return cTypeDatatypeEnumRuleCall_3_4_0; }
		
		//('.' 'it' 'has' ('a')? 'value' value=AttributeValue)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//'it'
		public Keyword getItKeyword_4_1() { return cItKeyword_4_1; }
		
		//'has'
		public Keyword getHasKeyword_4_2() { return cHasKeyword_4_2; }
		
		//('a')?
		public Keyword getAKeyword_4_3() { return cAKeyword_4_3; }
		
		//'value'
		public Keyword getValueKeyword_4_4() { return cValueKeyword_4_4; }
		
		//value=AttributeValue
		public Assignment getValueAssignment_4_5() { return cValueAssignment_4_5; }
		
		//AttributeValue
		public RuleCall getValueAttributeValueParserRuleCall_4_5_0() { return cValueAttributeValueParserRuleCall_4_5_0; }
	}
	public class AssociationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.AssociationAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAssociationsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAssociationKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCreateAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCreateCreateAssociationParserRuleCall_2_0_0 = (RuleCall)cCreateAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Assignment cEditAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEditEditAssociationParserRuleCall_2_1_1_0 = (RuleCall)cEditAssignment_2_1_1.eContents().get(0);
		
		//AssociationAction hidden(WS):
		//    ('have')? ('associations' | 'association') (create=CreateAssociation | name=ID edit=EditAssociation)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('have')? ('associations' | 'association') (create=CreateAssociation | name=ID edit=EditAssociation)
		public Group getGroup() { return cGroup; }
		
		//('have')?
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//('associations' | 'association')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'associations'
		public Keyword getAssociationsKeyword_1_0() { return cAssociationsKeyword_1_0; }
		
		//'association'
		public Keyword getAssociationKeyword_1_1() { return cAssociationKeyword_1_1; }
		
		//(create=CreateAssociation | name=ID edit=EditAssociation)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//create=CreateAssociation
		public Assignment getCreateAssignment_2_0() { return cCreateAssignment_2_0; }
		
		//CreateAssociation
		public RuleCall getCreateCreateAssociationParserRuleCall_2_0_0() { return cCreateCreateAssociationParserRuleCall_2_0_0; }
		
		//name=ID edit=EditAssociation
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0_0() { return cNameIDTerminalRuleCall_2_1_0_0; }
		
		//edit=EditAssociation
		public Assignment getEditAssignment_2_1_1() { return cEditAssignment_2_1_1; }
		
		//EditAssociation
		public RuleCall getEditEditAssociationParserRuleCall_2_1_1_0() { return cEditEditAssociationParserRuleCall_2_1_1_0; }
	}
	public class CreateAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.CreateAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOtherKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetClassParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Keyword cCalledKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRelationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRelationIDTerminalRuleCall_4_0 = (RuleCall)cRelationAssignment_4.eContents().get(0);
		
		//CreateAssociation hidden(WS):
		//    'to' ('other')? target=Class 'called' relation=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' ('other')? target=Class 'called' relation=ID
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//('other')?
		public Keyword getOtherKeyword_1() { return cOtherKeyword_1; }
		
		//target=Class
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//Class
		public RuleCall getTargetClassParserRuleCall_2_0() { return cTargetClassParserRuleCall_2_0; }
		
		//'called'
		public Keyword getCalledKeyword_3() { return cCalledKeyword_3; }
		
		//relation=ID
		public Assignment getRelationAssignment_4() { return cRelationAssignment_4; }
		
		//ID
		public RuleCall getRelationIDTerminalRuleCall_4_0() { return cRelationIDTerminalRuleCall_4_0; }
	}
	public class EditAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.EditAssociation");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeSetCompatibleParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeSetVersionRangeParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeSetVariantParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		private final RuleCall cTypeSetRightOpenParserRuleCall_0_3 = (RuleCall)cTypeAlternatives_0.eContents().get(3);
		private final RuleCall cTypeSetLeftOpenParserRuleCall_0_4 = (RuleCall)cTypeAlternatives_0.eContents().get(4);
		
		//EditAssociation hidden(WS):
		//    type=(SetCompatible | SetVersionRange | SetVariant | SetRightOpen | SetLeftOpen)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=(SetCompatible | SetVersionRange | SetVariant | SetRightOpen | SetLeftOpen)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(SetCompatible | SetVersionRange | SetVariant | SetRightOpen | SetLeftOpen)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//SetCompatible
		public RuleCall getTypeSetCompatibleParserRuleCall_0_0() { return cTypeSetCompatibleParserRuleCall_0_0; }
		
		//SetVersionRange
		public RuleCall getTypeSetVersionRangeParserRuleCall_0_1() { return cTypeSetVersionRangeParserRuleCall_0_1; }
		
		//SetVariant
		public RuleCall getTypeSetVariantParserRuleCall_0_2() { return cTypeSetVariantParserRuleCall_0_2; }
		
		//SetRightOpen
		public RuleCall getTypeSetRightOpenParserRuleCall_0_3() { return cTypeSetRightOpenParserRuleCall_0_3; }
		
		//SetLeftOpen
		public RuleCall getTypeSetLeftOpenParserRuleCall_0_4() { return cTypeSetLeftOpenParserRuleCall_0_4; }
	}
	public class SetCompatibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.SetCompatible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompatibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVersionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameDATETerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//SetCompatible hidden(WS):
		//    'compatible' 'with' 'version' name=DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'compatible' 'with' 'version' name=DATE
		public Group getGroup() { return cGroup; }
		
		//'compatible'
		public Keyword getCompatibleKeyword_0() { return cCompatibleKeyword_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'version'
		public Keyword getVersionKeyword_2() { return cVersionKeyword_2; }
		
		//name=DATE
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//DATE
		public RuleCall getNameDATETerminalRuleCall_3_0() { return cNameDATETerminalRuleCall_3_0; }
	}
	public class SetVersionRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.SetVersionRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRangeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartDATETerminalRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndDATETerminalRuleCall_6_0 = (RuleCall)cEndAssignment_6.eContents().get(0);
		
		//SetVersionRange hidden(WS):
		//    'with' 'version' 'range' 'from' start=DATE 'to' end=DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'version' 'range' 'from' start=DATE 'to' end=DATE
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'version'
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }
		
		//'range'
		public Keyword getRangeKeyword_2() { return cRangeKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//start=DATE
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//DATE
		public RuleCall getStartDATETerminalRuleCall_4_0() { return cStartDATETerminalRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//end=DATE
		public Assignment getEndAssignment_6() { return cEndAssignment_6; }
		
		//DATE
		public RuleCall getEndDATETerminalRuleCall_6_0() { return cEndDATETerminalRuleCall_6_0; }
	}
	public class SetVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.SetVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVersionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cVariantKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameDATETerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		//SetVariant hidden(WS):
		//    'with' 'all' 'versions' 'of' 'variant' name=DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'all' 'versions' 'of' 'variant' name=DATE
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'all'
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//'versions'
		public Keyword getVersionsKeyword_2() { return cVersionsKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//'variant'
		public Keyword getVariantKeyword_4() { return cVariantKeyword_4; }
		
		//name=DATE
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//DATE
		public RuleCall getNameDATETerminalRuleCall_5_0() { return cNameDATETerminalRuleCall_5_0; }
	}
	public class SetLeftOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.SetLeftOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDateDATETerminalRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		
		//SetLeftOpen hidden(WS):
		//    'up' 'to' 'date' date=DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'up' 'to' 'date' date=DATE
		public Group getGroup() { return cGroup; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'date'
		public Keyword getDateKeyword_2() { return cDateKeyword_2; }
		
		//date=DATE
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//DATE
		public RuleCall getDateDATETerminalRuleCall_3_0() { return cDateDATETerminalRuleCall_3_0; }
	}
	public class SetRightOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.SetRightOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDateDATETerminalRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		
		//SetRightOpen hidden(WS):
		//    'starting' 'from' 'date' date=DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'starting' 'from' 'date' date=DATE
		public Group getGroup() { return cGroup; }
		
		//'starting'
		public Keyword getStartingKeyword_0() { return cStartingKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//'date'
		public Keyword getDateKeyword_2() { return cDateKeyword_2; }
		
		//date=DATE
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//DATE
		public RuleCall getDateDATETerminalRuleCall_3_0() { return cDateDATETerminalRuleCall_3_0; }
	}
	public class InheritanceActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.InheritanceAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cInheritKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cInheritanceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParentClassParserRuleCall_2_0 = (RuleCall)cParentAssignment_2.eContents().get(0);
		
		//InheritanceAction hidden(WS):
		//    ('inherit' | 'inheritance') 'from' parent=Class
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('inherit' | 'inheritance') 'from' parent=Class
		public Group getGroup() { return cGroup; }
		
		//('inherit' | 'inheritance')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'inherit'
		public Keyword getInheritKeyword_0_0() { return cInheritKeyword_0_0; }
		
		//'inheritance'
		public Keyword getInheritanceKeyword_0_1() { return cInheritanceKeyword_0_1; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//parent=Class
		public Assignment getParentAssignment_2() { return cParentAssignment_2; }
		
		//Class
		public RuleCall getParentClassParserRuleCall_2_0() { return cParentClassParserRuleCall_2_0; }
	}
	public class CompositionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.CompositionAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCreateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCreateCreateCompositionParserRuleCall_0_0 = (RuleCall)cCreateAssignment_0.eContents().get(0);
		private final Assignment cEditAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEditEditCompositionParserRuleCall_1_0 = (RuleCall)cEditAssignment_1.eContents().get(0);
		
		//CompositionAction hidden(WS):
		//    create=CreateComposition | edit=EditComposition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//create=CreateComposition | edit=EditComposition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//create=CreateComposition
		public Assignment getCreateAssignment_0() { return cCreateAssignment_0; }
		
		//CreateComposition
		public RuleCall getCreateCreateCompositionParserRuleCall_0_0() { return cCreateCreateCompositionParserRuleCall_0_0; }
		
		//edit=EditComposition
		public Assignment getEditAssignment_1() { return cEditAssignment_1; }
		
		//EditComposition
		public RuleCall getEditEditCompositionParserRuleCall_1_0() { return cEditEditCompositionParserRuleCall_1_0; }
	}
	public class CreateCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.CreateComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cComposeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cCompositionKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cToKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetClassParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cCalledKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationIDTerminalRuleCall_3_0 = (RuleCall)cRelationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cItKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPriorityAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPriorityPriorityParserRuleCall_4_2_0 = (RuleCall)cPriorityAssignment_4_2.eContents().get(0);
		private final Keyword cBeKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cPublicityAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cPublicityPublicityEnumRuleCall_4_4_0 = (RuleCall)cPublicityAssignment_4_4.eContents().get(0);
		
		//CreateComposition hidden(WS):
		//    ('compose' | 'composition' 'to') target=Class 'called' relation=ID
		//    ('.' 'it' priority=Priority 'be' publicity=Publicity)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('compose' | 'composition' 'to') target=Class 'called' relation=ID
		//('.' 'it' priority=Priority 'be' publicity=Publicity)?
		public Group getGroup() { return cGroup; }
		
		//('compose' | 'composition' 'to')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'compose'
		public Keyword getComposeKeyword_0_0() { return cComposeKeyword_0_0; }
		
		//'composition' 'to'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'composition'
		public Keyword getCompositionKeyword_0_1_0() { return cCompositionKeyword_0_1_0; }
		
		//'to'
		public Keyword getToKeyword_0_1_1() { return cToKeyword_0_1_1; }
		
		//target=Class
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//Class
		public RuleCall getTargetClassParserRuleCall_1_0() { return cTargetClassParserRuleCall_1_0; }
		
		//'called'
		public Keyword getCalledKeyword_2() { return cCalledKeyword_2; }
		
		//relation=ID
		public Assignment getRelationAssignment_3() { return cRelationAssignment_3; }
		
		//ID
		public RuleCall getRelationIDTerminalRuleCall_3_0() { return cRelationIDTerminalRuleCall_3_0; }
		
		//('.' 'it' priority=Priority 'be' publicity=Publicity)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//'it'
		public Keyword getItKeyword_4_1() { return cItKeyword_4_1; }
		
		//priority=Priority
		public Assignment getPriorityAssignment_4_2() { return cPriorityAssignment_4_2; }
		
		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_4_2_0() { return cPriorityPriorityParserRuleCall_4_2_0; }
		
		//'be'
		public Keyword getBeKeyword_4_3() { return cBeKeyword_4_3; }
		
		//publicity=Publicity
		public Assignment getPublicityAssignment_4_4() { return cPublicityAssignment_4_4; }
		
		//Publicity
		public RuleCall getPublicityPublicityEnumRuleCall_4_4_0() { return cPublicityPublicityEnumRuleCall_4_4_0; }
	}
	public class EditCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.EditComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCompositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCompositionNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompositionNameIDTerminalRuleCall_2_0 = (RuleCall)cCompositionNameAssignment_2.eContents().get(0);
		private final Keyword cThatKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPublicityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPublicityPublicityEnumRuleCall_5_0 = (RuleCall)cPublicityAssignment_5.eContents().get(0);
		
		//EditComposition hidden(WS):
		//    ('have')? 'composition' compositionName=ID 'that' 'is' publicity=Publicity
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('have')? 'composition' compositionName=ID 'that' 'is' publicity=Publicity
		public Group getGroup() { return cGroup; }
		
		//('have')?
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//'composition'
		public Keyword getCompositionKeyword_1() { return cCompositionKeyword_1; }
		
		//compositionName=ID
		public Assignment getCompositionNameAssignment_2() { return cCompositionNameAssignment_2; }
		
		//ID
		public RuleCall getCompositionNameIDTerminalRuleCall_2_0() { return cCompositionNameIDTerminalRuleCall_2_0; }
		
		//'that'
		public Keyword getThatKeyword_3() { return cThatKeyword_3; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//publicity=Publicity
		public Assignment getPublicityAssignment_5() { return cPublicityAssignment_5; }
		
		//Publicity
		public RuleCall getPublicityPublicityEnumRuleCall_5_0() { return cPublicityPublicityEnumRuleCall_5_0; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cAbstractionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbstractionAbstractionEnumRuleCall_1_0 = (RuleCall)cAbstractionAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Class hidden(WS):
		//    ('the' | 'a')? (abstraction=Abstraction)? ('class')? name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' | 'a')? (abstraction=Abstraction)? ('class')? name=ID
		public Group getGroup() { return cGroup; }
		
		//('the' | 'a')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//(abstraction=Abstraction)?
		public Assignment getAbstractionAssignment_1() { return cAbstractionAssignment_1; }
		
		//Abstraction
		public RuleCall getAbstractionAbstractionEnumRuleCall_1_0() { return cAbstractionAbstractionEnumRuleCall_1_0; }
		
		//('class')?
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute hidden(WS):
		//    ('attribute')? name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('attribute')? name=ID
		public Group getGroup() { return cGroup; }
		
		//('attribute')?
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIdentifierValueEnumRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Identifier hidden(WS):
		//    value=IdentifierValue name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=IdentifierValue name=ID
		public Group getGroup() { return cGroup; }
		
		//value=IdentifierValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//IdentifierValue
		public RuleCall getValueIdentifierValueEnumRuleCall_0_0() { return cValueIdentifierValueEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Priority");
		private final Assignment cPriorityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPriorityPriorityValueEnumRuleCall_0 = (RuleCall)cPriorityAssignment.eContents().get(0);
		
		//Priority hidden(WS):
		//    priority=PriorityValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//priority=PriorityValue
		public Assignment getPriorityAssignment() { return cPriorityAssignment; }
		
		//PriorityValue
		public RuleCall getPriorityPriorityValueEnumRuleCall_0() { return cPriorityPriorityValueEnumRuleCall_0; }
	}
	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCarriageReturnKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDATETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AttributeValue:
		//    (ID ('\r')?)+ | INT | DATE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID ('\r')?)+ | INT | DATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(ID ('\r')?)+
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//('\r')?
		public Keyword getCarriageReturnKeyword_0_1() { return cCarriageReturnKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//DATE
		public RuleCall getDATETerminalRuleCall_2() { return cDATETerminalRuleCall_2; }
	}
	
	public class PublicityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Publicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Publicity:
		//    PUBLIC='public' | PRIVATE='private'
		//;
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='public' | PRIVATE='private'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
	}
	public class PriorityValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.PriorityValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSHOULDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSHOULDShouldKeyword_0_0 = (Keyword)cSHOULDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMUSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMUSTMustKeyword_1_0 = (Keyword)cMUSTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PriorityValue:
		//    SHOULD='should' | MUST='must'
		//;
		public EnumRule getRule() { return rule; }
		
		//SHOULD='should' | MUST='must'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SHOULD='should'
		public EnumLiteralDeclaration getSHOULDEnumLiteralDeclaration_0() { return cSHOULDEnumLiteralDeclaration_0; }
		
		//'should'
		public Keyword getSHOULDShouldKeyword_0_0() { return cSHOULDShouldKeyword_0_0; }
		
		//MUST='must'
		public EnumLiteralDeclaration getMUSTEnumLiteralDeclaration_1() { return cMUSTEnumLiteralDeclaration_1; }
		
		//'must'
		public Keyword getMUSTMustKeyword_1_0() { return cMUSTMustKeyword_1_0; }
	}
	public class AbstractionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Abstraction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEWNewKeyword_0_0 = (Keyword)cNEWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cABSTRACTIONAbstractKeyword_1_0 = (Keyword)cABSTRACTIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Abstraction:
		//    NEW='new' | ABSTRACTION='abstract'
		//;
		public EnumRule getRule() { return rule; }
		
		//NEW='new' | ABSTRACTION='abstract'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEW='new'
		public EnumLiteralDeclaration getNEWEnumLiteralDeclaration_0() { return cNEWEnumLiteralDeclaration_0; }
		
		//'new'
		public Keyword getNEWNewKeyword_0_0() { return cNEWNewKeyword_0_0; }
		
		//ABSTRACTION='abstract'
		public EnumLiteralDeclaration getABSTRACTIONEnumLiteralDeclaration_1() { return cABSTRACTIONEnumLiteralDeclaration_1; }
		
		//'abstract'
		public Keyword getABSTRACTIONAbstractKeyword_1_0() { return cABSTRACTIONAbstractKeyword_1_0; }
	}
	public class IdentifierValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.IdentifierValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNAMENameKeyword_0_0 = (Keyword)cNAMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cURIEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cURIURIKeyword_1_0 = (Keyword)cURIEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IdentifierValue:
		//    NAME='name' | URI='URI'
		//;
		public EnumRule getRule() { return rule; }
		
		//NAME='name' | URI='URI'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NAME='name'
		public EnumLiteralDeclaration getNAMEEnumLiteralDeclaration_0() { return cNAMEEnumLiteralDeclaration_0; }
		
		//'name'
		public Keyword getNAMENameKeyword_0_0() { return cNAMENameKeyword_0_0; }
		
		//URI='URI'
		public EnumLiteralDeclaration getURIEnumLiteralDeclaration_1() { return cURIEnumLiteralDeclaration_1; }
		
		//'URI'
		public Keyword getURIURIKeyword_1_0() { return cURIURIKeyword_1_0; }
	}
	public class DatatypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDEFAULTKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWORDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWORDTimeKeyword_1_0 = (Keyword)cWORDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPHRASEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPHRASEPhraseKeyword_2_0 = (Keyword)cPHRASEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNUMBERNumberKeyword_3_0 = (Keyword)cNUMBEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Datatype:
		//    DEFAULT='DEFAULT' | WORD='time' | PHRASE='phrase' | NUMBER='number'
		//;
		public EnumRule getRule() { return rule; }
		
		//DEFAULT='DEFAULT' | WORD='time' | PHRASE='phrase' | NUMBER='number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEFAULT='DEFAULT'
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }
		
		//'DEFAULT'
		public Keyword getDEFAULTDEFAULTKeyword_0_0() { return cDEFAULTDEFAULTKeyword_0_0; }
		
		//WORD='time'
		public EnumLiteralDeclaration getWORDEnumLiteralDeclaration_1() { return cWORDEnumLiteralDeclaration_1; }
		
		//'time'
		public Keyword getWORDTimeKeyword_1_0() { return cWORDTimeKeyword_1_0; }
		
		//PHRASE='phrase'
		public EnumLiteralDeclaration getPHRASEEnumLiteralDeclaration_2() { return cPHRASEEnumLiteralDeclaration_2; }
		
		//'phrase'
		public Keyword getPHRASEPhraseKeyword_2_0() { return cPHRASEPhraseKeyword_2_0; }
		
		//NUMBER='number'
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_3() { return cNUMBEREnumLiteralDeclaration_3; }
		
		//'number'
		public Keyword getNUMBERNumberKeyword_3_0() { return cNUMBERNumberKeyword_3_0; }
	}
	
	private final FeatureRequestElements pFeatureRequest;
	private final StatementElements pStatement;
	private final ChangeStatementElements pChangeStatement;
	private final CreationStatementElements pCreationStatement;
	private final ActionElements pAction;
	private final UpdateActionElements pUpdateAction;
	private final UpdateAttributeDatatypeElements pUpdateAttributeDatatype;
	private final UpdateAttributeIdentifierElements pUpdateAttributeIdentifier;
	private final UpdateAttributeValueElements pUpdateAttributeValue;
	private final AttributeActionElements pAttributeAction;
	private final AssociationActionElements pAssociationAction;
	private final CreateAssociationElements pCreateAssociation;
	private final EditAssociationElements pEditAssociation;
	private final SetCompatibleElements pSetCompatible;
	private final SetVersionRangeElements pSetVersionRange;
	private final SetVariantElements pSetVariant;
	private final SetLeftOpenElements pSetLeftOpen;
	private final SetRightOpenElements pSetRightOpen;
	private final InheritanceActionElements pInheritanceAction;
	private final CompositionActionElements pCompositionAction;
	private final CreateCompositionElements pCreateComposition;
	private final EditCompositionElements pEditComposition;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final IdentifierElements pIdentifier;
	private final PriorityElements pPriority;
	private final AttributeValueElements pAttributeValue;
	private final PublicityElements ePublicity;
	private final PriorityValueElements ePriorityValue;
	private final AbstractionElements eAbstraction;
	private final IdentifierValueElements eIdentifierValue;
	private final DatatypeElements eDatatype;
	private final TerminalRule tDATE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeatureLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFeatureRequest = new FeatureRequestElements();
		this.pStatement = new StatementElements();
		this.pChangeStatement = new ChangeStatementElements();
		this.pCreationStatement = new CreationStatementElements();
		this.pAction = new ActionElements();
		this.pUpdateAction = new UpdateActionElements();
		this.pUpdateAttributeDatatype = new UpdateAttributeDatatypeElements();
		this.pUpdateAttributeIdentifier = new UpdateAttributeIdentifierElements();
		this.pUpdateAttributeValue = new UpdateAttributeValueElements();
		this.pAttributeAction = new AttributeActionElements();
		this.pAssociationAction = new AssociationActionElements();
		this.pCreateAssociation = new CreateAssociationElements();
		this.pEditAssociation = new EditAssociationElements();
		this.pSetCompatible = new SetCompatibleElements();
		this.pSetVersionRange = new SetVersionRangeElements();
		this.pSetVariant = new SetVariantElements();
		this.pSetLeftOpen = new SetLeftOpenElements();
		this.pSetRightOpen = new SetRightOpenElements();
		this.pInheritanceAction = new InheritanceActionElements();
		this.pCompositionAction = new CompositionActionElements();
		this.pCreateComposition = new CreateCompositionElements();
		this.pEditComposition = new EditCompositionElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pIdentifier = new IdentifierElements();
		this.pPriority = new PriorityElements();
		this.pAttributeValue = new AttributeValueElements();
		this.ePublicity = new PublicityElements();
		this.ePriorityValue = new PriorityValueElements();
		this.eAbstraction = new AbstractionElements();
		this.eIdentifierValue = new IdentifierValueElements();
		this.eDatatype = new DatatypeElements();
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.tud.st.featurelang.FeatureLang.DATE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tud.st.featurelang.FeatureLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureRequest:
	//    (statements+= Statement)*;
	public FeatureRequestElements getFeatureRequestAccess() {
		return pFeatureRequest;
	}
	
	public ParserRule getFeatureRequestRule() {
		return getFeatureRequestAccess().getRule();
	}
	
	//Statement:
	//    (ChangeStatement | CreationStatement) ('.')?
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ChangeStatement hidden(WS):
	//    ((target=Class
	//    (priority=Priority (negation ?= 'not')?)?) | (('set' | 'change' | negation ?= 'remove') 'in' target=Class))
	//    (action=Action | update=UpdateAction)
	//;
	public ChangeStatementElements getChangeStatementAccess() {
		return pChangeStatement;
	}
	
	public ParserRule getChangeStatementRule() {
		return getChangeStatementAccess().getRule();
	}
	
	//CreationStatement hidden(WS):
	//    ((classElement=Class priority=Priority (negation ?= 'not')? ('exist' | 'be')) |
	//        ('create' | negation ?= 'delete') classElement=Class)
	//;
	public CreationStatementElements getCreationStatementAccess() {
		return pCreationStatement;
	}
	
	public ParserRule getCreationStatementRule() {
		return getCreationStatementAccess().getRule();
	}
	
	//Action hidden(WS):
	//    type=(AttributeAction | AssociationAction | InheritanceAction | CompositionAction)
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//UpdateAction hidden(WS):
	//    ('has')? ('an' | 'a' | 'the') ('existing' | 'created')
	//    attribute=Attribute '.' 'it' priority=Priority (datatype=UpdateAttributeDatatype |
	//                                                    identifier=UpdateAttributeIdentifier |
	//                                                    value=UpdateAttributeValue
	//    )
	//;
	public UpdateActionElements getUpdateActionAccess() {
		return pUpdateAction;
	}
	
	public ParserRule getUpdateActionRule() {
		return getUpdateActionAccess().getRule();
	}
	
	//UpdateAttributeDatatype hidden (WS):
	//    'be' 'a' type=Datatype 'instead' 'of' oldType=Datatype
	//;
	public UpdateAttributeDatatypeElements getUpdateAttributeDatatypeAccess() {
		return pUpdateAttributeDatatype;
	}
	
	public ParserRule getUpdateAttributeDatatypeRule() {
		return getUpdateAttributeDatatypeAccess().getRule();
	}
	
	//UpdateAttributeIdentifier hidden (WS):
	//    'have' ('a' | 'an')? identifier=Identifier 'instead' 'of' oldIdentifier=Identifier
	//;
	public UpdateAttributeIdentifierElements getUpdateAttributeIdentifierAccess() {
		return pUpdateAttributeIdentifier;
	}
	
	public ParserRule getUpdateAttributeIdentifierRule() {
		return getUpdateAttributeIdentifierAccess().getRule();
	}
	
	//UpdateAttributeValue hidden (WS):
	//    'have' ('a')? 'value' value=AttributeValue 'instead' 'of' oldValue=AttributeValue
	//;
	public UpdateAttributeValueElements getUpdateAttributeValueAccess() {
		return pUpdateAttributeValue;
	}
	
	public ParserRule getUpdateAttributeValueRule() {
		return getUpdateAttributeValueAccess().getRule();
	}
	
	//AttributeAction hidden(WS):
	//    ('have')? ('the' | 'an' | 'a') attribute=Attribute
	//    ('.' 'it' 'is' 'a' type=Datatype)?
	//    ('.' 'it' 'has' ('a')? 'value' value=AttributeValue)?
	//;
	public AttributeActionElements getAttributeActionAccess() {
		return pAttributeAction;
	}
	
	public ParserRule getAttributeActionRule() {
		return getAttributeActionAccess().getRule();
	}
	
	//AssociationAction hidden(WS):
	//    ('have')? ('associations' | 'association') (create=CreateAssociation | name=ID edit=EditAssociation)
	//;
	public AssociationActionElements getAssociationActionAccess() {
		return pAssociationAction;
	}
	
	public ParserRule getAssociationActionRule() {
		return getAssociationActionAccess().getRule();
	}
	
	//CreateAssociation hidden(WS):
	//    'to' ('other')? target=Class 'called' relation=ID
	//;
	public CreateAssociationElements getCreateAssociationAccess() {
		return pCreateAssociation;
	}
	
	public ParserRule getCreateAssociationRule() {
		return getCreateAssociationAccess().getRule();
	}
	
	//EditAssociation hidden(WS):
	//    type=(SetCompatible | SetVersionRange | SetVariant | SetRightOpen | SetLeftOpen)
	//;
	public EditAssociationElements getEditAssociationAccess() {
		return pEditAssociation;
	}
	
	public ParserRule getEditAssociationRule() {
		return getEditAssociationAccess().getRule();
	}
	
	//SetCompatible hidden(WS):
	//    'compatible' 'with' 'version' name=DATE
	//;
	public SetCompatibleElements getSetCompatibleAccess() {
		return pSetCompatible;
	}
	
	public ParserRule getSetCompatibleRule() {
		return getSetCompatibleAccess().getRule();
	}
	
	//SetVersionRange hidden(WS):
	//    'with' 'version' 'range' 'from' start=DATE 'to' end=DATE
	//;
	public SetVersionRangeElements getSetVersionRangeAccess() {
		return pSetVersionRange;
	}
	
	public ParserRule getSetVersionRangeRule() {
		return getSetVersionRangeAccess().getRule();
	}
	
	//SetVariant hidden(WS):
	//    'with' 'all' 'versions' 'of' 'variant' name=DATE
	//;
	public SetVariantElements getSetVariantAccess() {
		return pSetVariant;
	}
	
	public ParserRule getSetVariantRule() {
		return getSetVariantAccess().getRule();
	}
	
	//SetLeftOpen hidden(WS):
	//    'up' 'to' 'date' date=DATE
	//;
	public SetLeftOpenElements getSetLeftOpenAccess() {
		return pSetLeftOpen;
	}
	
	public ParserRule getSetLeftOpenRule() {
		return getSetLeftOpenAccess().getRule();
	}
	
	//SetRightOpen hidden(WS):
	//    'starting' 'from' 'date' date=DATE
	//;
	public SetRightOpenElements getSetRightOpenAccess() {
		return pSetRightOpen;
	}
	
	public ParserRule getSetRightOpenRule() {
		return getSetRightOpenAccess().getRule();
	}
	
	//InheritanceAction hidden(WS):
	//    ('inherit' | 'inheritance') 'from' parent=Class
	//;
	public InheritanceActionElements getInheritanceActionAccess() {
		return pInheritanceAction;
	}
	
	public ParserRule getInheritanceActionRule() {
		return getInheritanceActionAccess().getRule();
	}
	
	//CompositionAction hidden(WS):
	//    create=CreateComposition | edit=EditComposition
	//;
	public CompositionActionElements getCompositionActionAccess() {
		return pCompositionAction;
	}
	
	public ParserRule getCompositionActionRule() {
		return getCompositionActionAccess().getRule();
	}
	
	//CreateComposition hidden(WS):
	//    ('compose' | 'composition' 'to') target=Class 'called' relation=ID
	//    ('.' 'it' priority=Priority 'be' publicity=Publicity)?
	//;
	public CreateCompositionElements getCreateCompositionAccess() {
		return pCreateComposition;
	}
	
	public ParserRule getCreateCompositionRule() {
		return getCreateCompositionAccess().getRule();
	}
	
	//EditComposition hidden(WS):
	//    ('have')? 'composition' compositionName=ID 'that' 'is' publicity=Publicity
	//;
	public EditCompositionElements getEditCompositionAccess() {
		return pEditComposition;
	}
	
	public ParserRule getEditCompositionRule() {
		return getEditCompositionAccess().getRule();
	}
	
	//Class hidden(WS):
	//    ('the' | 'a')? (abstraction=Abstraction)? ('class')? name=ID
	//;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute hidden(WS):
	//    ('attribute')? name=ID
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Identifier hidden(WS):
	//    value=IdentifierValue name=ID
	//;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Priority hidden(WS):
	//    priority=PriorityValue
	//;
	public PriorityElements getPriorityAccess() {
		return pPriority;
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}
	
	//AttributeValue:
	//    (ID ('\r')?)+ | INT | DATE
	//;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}
	
	//enum Publicity:
	//    PUBLIC='public' | PRIVATE='private'
	//;
	public PublicityElements getPublicityAccess() {
		return ePublicity;
	}
	
	public EnumRule getPublicityRule() {
		return getPublicityAccess().getRule();
	}
	
	//enum PriorityValue:
	//    SHOULD='should' | MUST='must'
	//;
	public PriorityValueElements getPriorityValueAccess() {
		return ePriorityValue;
	}
	
	public EnumRule getPriorityValueRule() {
		return getPriorityValueAccess().getRule();
	}
	
	//enum Abstraction:
	//    NEW='new' | ABSTRACTION='abstract'
	//;
	public AbstractionElements getAbstractionAccess() {
		return eAbstraction;
	}
	
	public EnumRule getAbstractionRule() {
		return getAbstractionAccess().getRule();
	}
	
	//enum IdentifierValue:
	//    NAME='name' | URI='URI'
	//;
	public IdentifierValueElements getIdentifierValueAccess() {
		return eIdentifierValue;
	}
	
	public EnumRule getIdentifierValueRule() {
		return getIdentifierValueAccess().getRule();
	}
	
	//enum Datatype:
	//    DEFAULT='DEFAULT' | WORD='time' | PHRASE='phrase' | NUMBER='number'
	//;
	public DatatypeElements getDatatypeAccess() {
		return eDatatype;
	}
	
	public EnumRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//terminal DATE:
	//    INT '-' INT '-' INT
	//;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
