/**
 * generated by Xtext 2.32.0
 */
package de.tud.st.featurelang.featureLang.util;

import de.tud.st.featurelang.featureLang.Action;
import de.tud.st.featurelang.featureLang.AssociationAction;
import de.tud.st.featurelang.featureLang.Attribute;
import de.tud.st.featurelang.featureLang.AttributeAction;
import de.tud.st.featurelang.featureLang.ChangeStatement;
import de.tud.st.featurelang.featureLang.CompositionAction;
import de.tud.st.featurelang.featureLang.CreateAssociation;
import de.tud.st.featurelang.featureLang.CreateComposition;
import de.tud.st.featurelang.featureLang.CreateInheritance;
import de.tud.st.featurelang.featureLang.CreationStatement;
import de.tud.st.featurelang.featureLang.EditAssociation;
import de.tud.st.featurelang.featureLang.EditComposition;
import de.tud.st.featurelang.featureLang.EditInheritance;
import de.tud.st.featurelang.featureLang.FeatureLangPackage;
import de.tud.st.featurelang.featureLang.FeatureRequest;
import de.tud.st.featurelang.featureLang.Identifier;
import de.tud.st.featurelang.featureLang.InheritanceAction;
import de.tud.st.featurelang.featureLang.Priority;
import de.tud.st.featurelang.featureLang.SetCompatible;
import de.tud.st.featurelang.featureLang.SetLeftOpen;
import de.tud.st.featurelang.featureLang.SetRightOpen;
import de.tud.st.featurelang.featureLang.SetVariant;
import de.tud.st.featurelang.featureLang.SetVersionRange;
import de.tud.st.featurelang.featureLang.Statement;
import de.tud.st.featurelang.featureLang.UpdateAction;
import de.tud.st.featurelang.featureLang.UpdateAttributeDatatype;
import de.tud.st.featurelang.featureLang.UpdateAttributeIdentifier;
import de.tud.st.featurelang.featureLang.UpdateAttributeValue;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.tud.st.featurelang.featureLang.FeatureLangPackage
 * @generated
 */
public class FeatureLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FeatureLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = FeatureLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case FeatureLangPackage.FEATURE_REQUEST:
      {
        FeatureRequest featureRequest = (FeatureRequest)theEObject;
        T result = caseFeatureRequest(featureRequest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.CHANGE_STATEMENT:
      {
        ChangeStatement changeStatement = (ChangeStatement)theEObject;
        T result = caseChangeStatement(changeStatement);
        if (result == null) result = caseStatement(changeStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.CREATION_STATEMENT:
      {
        CreationStatement creationStatement = (CreationStatement)theEObject;
        T result = caseCreationStatement(creationStatement);
        if (result == null) result = caseStatement(creationStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.UPDATE_ACTION:
      {
        UpdateAction updateAction = (UpdateAction)theEObject;
        T result = caseUpdateAction(updateAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.UPDATE_ATTRIBUTE_DATATYPE:
      {
        UpdateAttributeDatatype updateAttributeDatatype = (UpdateAttributeDatatype)theEObject;
        T result = caseUpdateAttributeDatatype(updateAttributeDatatype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.UPDATE_ATTRIBUTE_IDENTIFIER:
      {
        UpdateAttributeIdentifier updateAttributeIdentifier = (UpdateAttributeIdentifier)theEObject;
        T result = caseUpdateAttributeIdentifier(updateAttributeIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.UPDATE_ATTRIBUTE_VALUE:
      {
        UpdateAttributeValue updateAttributeValue = (UpdateAttributeValue)theEObject;
        T result = caseUpdateAttributeValue(updateAttributeValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.ATTRIBUTE_ACTION:
      {
        AttributeAction attributeAction = (AttributeAction)theEObject;
        T result = caseAttributeAction(attributeAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.ASSOCIATION_ACTION:
      {
        AssociationAction associationAction = (AssociationAction)theEObject;
        T result = caseAssociationAction(associationAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.CREATE_ASSOCIATION:
      {
        CreateAssociation createAssociation = (CreateAssociation)theEObject;
        T result = caseCreateAssociation(createAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.EDIT_ASSOCIATION:
      {
        EditAssociation editAssociation = (EditAssociation)theEObject;
        T result = caseEditAssociation(editAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.SET_COMPATIBLE:
      {
        SetCompatible setCompatible = (SetCompatible)theEObject;
        T result = caseSetCompatible(setCompatible);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.SET_VERSION_RANGE:
      {
        SetVersionRange setVersionRange = (SetVersionRange)theEObject;
        T result = caseSetVersionRange(setVersionRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.SET_VARIANT:
      {
        SetVariant setVariant = (SetVariant)theEObject;
        T result = caseSetVariant(setVariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.SET_RIGHT_OPEN:
      {
        SetRightOpen setRightOpen = (SetRightOpen)theEObject;
        T result = caseSetRightOpen(setRightOpen);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.SET_LEFT_OPEN:
      {
        SetLeftOpen setLeftOpen = (SetLeftOpen)theEObject;
        T result = caseSetLeftOpen(setLeftOpen);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.INHERITANCE_ACTION:
      {
        InheritanceAction inheritanceAction = (InheritanceAction)theEObject;
        T result = caseInheritanceAction(inheritanceAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.CREATE_INHERITANCE:
      {
        CreateInheritance createInheritance = (CreateInheritance)theEObject;
        T result = caseCreateInheritance(createInheritance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.EDIT_INHERITANCE:
      {
        EditInheritance editInheritance = (EditInheritance)theEObject;
        T result = caseEditInheritance(editInheritance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.COMPOSITION_ACTION:
      {
        CompositionAction compositionAction = (CompositionAction)theEObject;
        T result = caseCompositionAction(compositionAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.CREATE_COMPOSITION:
      {
        CreateComposition createComposition = (CreateComposition)theEObject;
        T result = caseCreateComposition(createComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.EDIT_COMPOSITION:
      {
        EditComposition editComposition = (EditComposition)theEObject;
        T result = caseEditComposition(editComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.CLASS:
      {
        de.tud.st.featurelang.featureLang.Class class_ = (de.tud.st.featurelang.featureLang.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.IDENTIFIER:
      {
        Identifier identifier = (Identifier)theEObject;
        T result = caseIdentifier(identifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureLangPackage.PRIORITY:
      {
        Priority priority = (Priority)theEObject;
        T result = casePriority(priority);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatureRequest(FeatureRequest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeStatement(ChangeStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Creation Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Creation Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreationStatement(CreationStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateAction(UpdateAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Attribute Datatype</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Attribute Datatype</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateAttributeDatatype(UpdateAttributeDatatype object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Attribute Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Attribute Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateAttributeIdentifier(UpdateAttributeIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Attribute Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Attribute Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateAttributeValue(UpdateAttributeValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeAction(AttributeAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Association Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Association Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssociationAction(AssociationAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateAssociation(CreateAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Edit Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Edit Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditAssociation(EditAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Compatible</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Compatible</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetCompatible(SetCompatible object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Version Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Version Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetVersionRange(SetVersionRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Variant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Variant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetVariant(SetVariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Right Open</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Right Open</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetRightOpen(SetRightOpen object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Left Open</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Left Open</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetLeftOpen(SetLeftOpen object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inheritance Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inheritance Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInheritanceAction(InheritanceAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Inheritance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Inheritance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateInheritance(CreateInheritance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Edit Inheritance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Edit Inheritance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditInheritance(EditInheritance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositionAction(CompositionAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateComposition(CreateComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Edit Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Edit Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditComposition(EditComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(de.tud.st.featurelang.featureLang.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifier(Identifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Priority</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Priority</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePriority(Priority object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //FeatureLangSwitch
