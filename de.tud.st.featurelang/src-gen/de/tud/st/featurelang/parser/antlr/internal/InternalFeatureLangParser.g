/*
 * generated by Xtext 2.32.0
 */
parser grammar InternalFeatureLangParser;

options {
	tokenVocab=InternalFeatureLangLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package de.tud.st.featurelang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.tud.st.featurelang.services.FeatureLangGrammarAccess;

}

@members {

 	private FeatureLangGrammarAccess grammarAccess;

    public InternalFeatureLangParser(TokenStream input, FeatureLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FeatureRequest";
   	}

   	@Override
   	protected FeatureLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFeatureRequest
entryRuleFeatureRequest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRequestRule()); }
	iv_ruleFeatureRequest=ruleFeatureRequest
	{ $current=$iv_ruleFeatureRequest.current; }
	EOF;

// Rule FeatureRequest
ruleFeatureRequest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFeatureRequestAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFeatureRequestRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"de.tud.st.featurelang.FeatureLang.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getChangeStatementParserRuleCall_0_0());
			}
			this_ChangeStatement_0=ruleChangeStatement
			{
				$current = $this_ChangeStatement_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getCreationStatementParserRuleCall_0_1());
			}
			this_CreationStatement_1=ruleCreationStatement
			{
				$current = $this_CreationStatement_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_2=FullStop
			{
				newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getFullStopKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleChangeStatement
entryRuleChangeStatement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getChangeStatementRule()); }
	iv_ruleChangeStatement=ruleChangeStatement
	{ $current=$iv_ruleChangeStatement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ChangeStatement
ruleChangeStatement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getChangeStatementAccess().getTargetClassParserRuleCall_0_0());
				}
				lv_target_0_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangeStatementRule());
					}
					set(
						$current,
						"target",
						lv_target_0_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getChangeStatementAccess().getPriorityPriorityParserRuleCall_1_0_0_0());
						}
						lv_priority_1_0=rulePriority
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChangeStatementRule());
							}
							set(
								$current,
								"priority",
								lv_priority_1_0,
								"de.tud.st.featurelang.FeatureLang.Priority");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						lv_negation_2_0=Not
						{
							newLeafNode(lv_negation_2_0, grammarAccess.getChangeStatementAccess().getNegationNotKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getChangeStatementRule());
							}
							setWithLastConsumed($current, "negation", lv_negation_2_0 != null, "not");
						}
					)
				)?
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getChangeStatementAccess().getActionActionParserRuleCall_1_0_2_0_0());
							}
							lv_action_3_0=ruleAction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getChangeStatementRule());
								}
								set(
									$current,
									"action",
									lv_action_3_0,
									"de.tud.st.featurelang.FeatureLang.Action");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						otherlv_4=Have
						{
							newLeafNode(otherlv_4, grammarAccess.getChangeStatementAccess().getHaveKeyword_1_0_2_1_0());
						}
						(
							otherlv_5=A
							{
								newLeafNode(otherlv_5, grammarAccess.getChangeStatementAccess().getAKeyword_1_0_2_1_1_0());
							}
							    |
							otherlv_6=An
							{
								newLeafNode(otherlv_6, grammarAccess.getChangeStatementAccess().getAnKeyword_1_0_2_1_1_1());
							}
						)?
						(
							(
								{
									newCompositeNode(grammarAccess.getChangeStatementAccess().getIdentifierIdentifierParserRuleCall_1_0_2_1_2_0());
								}
								lv_identifier_7_0=ruleIdentifier
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getChangeStatementRule());
									}
									set(
										$current,
										"identifier",
										lv_identifier_7_0,
										"de.tud.st.featurelang.FeatureLang.Identifier");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getChangeStatementAccess().getUpdateUpdateActionParserRuleCall_1_1_0());
					}
					lv_update_8_0=ruleUpdateAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChangeStatementRule());
						}
						set(
							$current,
							"update",
							lv_update_8_0,
							"de.tud.st.featurelang.FeatureLang.UpdateAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreationStatement
entryRuleCreationStatement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getCreationStatementRule()); }
	iv_ruleCreationStatement=ruleCreationStatement
	{ $current=$iv_ruleCreationStatement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CreationStatement
ruleCreationStatement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCreationStatementAccess().getClassElementClassParserRuleCall_0_0());
				}
				lv_classElement_0_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreationStatementRule());
					}
					set(
						$current,
						"classElement",
						lv_classElement_0_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCreationStatementAccess().getPriorityPriorityParserRuleCall_1_0());
				}
				lv_priority_1_0=rulePriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreationStatementRule());
					}
					set(
						$current,
						"priority",
						lv_priority_1_0,
						"de.tud.st.featurelang.FeatureLang.Priority");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_negation_2_0=Not
				{
					newLeafNode(lv_negation_2_0, grammarAccess.getCreationStatementAccess().getNegationNotKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreationStatementRule());
					}
					setWithLastConsumed($current, "negation", lv_negation_2_0 != null, "not");
				}
			)
		)?
		(
			otherlv_3=Exist
			{
				newLeafNode(otherlv_3, grammarAccess.getCreationStatementAccess().getExistKeyword_3_0());
			}
			    |
			otherlv_4=Be
			{
				newLeafNode(otherlv_4, grammarAccess.getCreationStatementAccess().getBeKeyword_3_1());
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeAttributeActionParserRuleCall_0_0());
				}
				lv_type_0_1=ruleAttributeAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"de.tud.st.featurelang.FeatureLang.AttributeAction");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeAssociationActionParserRuleCall_0_1());
				}
				lv_type_0_2=ruleAssociationAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"de.tud.st.featurelang.FeatureLang.AssociationAction");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeInheritanceActionParserRuleCall_0_2());
				}
				lv_type_0_3=ruleInheritanceAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"de.tud.st.featurelang.FeatureLang.InheritanceAction");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeCompositionActionParserRuleCall_0_3());
				}
				lv_type_0_4=ruleCompositionAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_4,
						"de.tud.st.featurelang.FeatureLang.CompositionAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAction
entryRuleUpdateAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getUpdateActionRule()); }
	iv_ruleUpdateAction=ruleUpdateAction
	{ $current=$iv_ruleUpdateAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAction
ruleUpdateAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Has
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateActionAccess().getHasKeyword_0());
		}
		(
			otherlv_1=An
			{
				newLeafNode(otherlv_1, grammarAccess.getUpdateActionAccess().getAnKeyword_1_0());
			}
			    |
			otherlv_2=A
			{
				newLeafNode(otherlv_2, grammarAccess.getUpdateActionAccess().getAKeyword_1_1());
			}
		)
		(
			otherlv_3=Existing
			{
				newLeafNode(otherlv_3, grammarAccess.getUpdateActionAccess().getExistingKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateActionAccess().getAttributeAttributeParserRuleCall_3_0());
				}
				lv_attribute_4_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_4_0,
						"de.tud.st.featurelang.FeatureLang.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=FullStop
		{
			newLeafNode(otherlv_5, grammarAccess.getUpdateActionAccess().getFullStopKeyword_4());
		}
		otherlv_6=It
		{
			newLeafNode(otherlv_6, grammarAccess.getUpdateActionAccess().getItKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateActionAccess().getPriorityPriorityParserRuleCall_6_0());
				}
				lv_priority_7_0=rulePriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
					}
					set(
						$current,
						"priority",
						lv_priority_7_0,
						"de.tud.st.featurelang.FeatureLang.Priority");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUpdateActionAccess().getDatatypeUpdateAttributeDatatypeParserRuleCall_7_0_0());
					}
					lv_datatype_8_0=ruleUpdateAttributeDatatype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
						}
						set(
							$current,
							"datatype",
							lv_datatype_8_0,
							"de.tud.st.featurelang.FeatureLang.UpdateAttributeDatatype");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getUpdateActionAccess().getIdentifierUpdateAttributeIdentifierParserRuleCall_7_1_0());
					}
					lv_identifier_9_0=ruleUpdateAttributeIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_9_0,
							"de.tud.st.featurelang.FeatureLang.UpdateAttributeIdentifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getUpdateActionAccess().getValueUpdateAttributeValueParserRuleCall_7_2_0());
					}
					lv_value_10_0=ruleUpdateAttributeValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
						}
						set(
							$current,
							"value",
							lv_value_10_0,
							"de.tud.st.featurelang.FeatureLang.UpdateAttributeValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAttributeDatatype
entryRuleUpdateAttributeDatatype returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getUpdateAttributeDatatypeRule()); }
	iv_ruleUpdateAttributeDatatype=ruleUpdateAttributeDatatype
	{ $current=$iv_ruleUpdateAttributeDatatype.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAttributeDatatype
ruleUpdateAttributeDatatype returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Be
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateAttributeDatatypeAccess().getBeKeyword_0());
		}
		otherlv_1=A
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateAttributeDatatypeAccess().getAKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateAttributeDatatypeAccess().getTypeDatatypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleDatatype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateAttributeDatatypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.tud.st.featurelang.FeatureLang.Datatype");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAttributeIdentifier
entryRuleUpdateAttributeIdentifier returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getUpdateAttributeIdentifierRule()); }
	iv_ruleUpdateAttributeIdentifier=ruleUpdateAttributeIdentifier
	{ $current=$iv_ruleUpdateAttributeIdentifier.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAttributeIdentifier
ruleUpdateAttributeIdentifier returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Have
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateAttributeIdentifierAccess().getHaveKeyword_0());
		}
		(
			otherlv_1=A
			{
				newLeafNode(otherlv_1, grammarAccess.getUpdateAttributeIdentifierAccess().getAKeyword_1_0());
			}
			    |
			otherlv_2=An
			{
				newLeafNode(otherlv_2, grammarAccess.getUpdateAttributeIdentifierAccess().getAnKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateAttributeIdentifierAccess().getIdentifierIdentifierParserRuleCall_2_0());
				}
				lv_identifier_3_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateAttributeIdentifierRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_3_0,
						"de.tud.st.featurelang.FeatureLang.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAttributeValue
entryRuleUpdateAttributeValue returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getUpdateAttributeValueRule()); }
	iv_ruleUpdateAttributeValue=ruleUpdateAttributeValue
	{ $current=$iv_ruleUpdateAttributeValue.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAttributeValue
ruleUpdateAttributeValue returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Have
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateAttributeValueAccess().getHaveKeyword_0());
		}
		(
			otherlv_1=A
			{
				newLeafNode(otherlv_1, grammarAccess.getUpdateAttributeValueAccess().getAKeyword_1());
			}
		)?
		otherlv_2=Value
		{
			newLeafNode(otherlv_2, grammarAccess.getUpdateAttributeValueAccess().getValueKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_ID
				{
					newLeafNode(lv_value_3_0, grammarAccess.getUpdateAttributeValueAccess().getValueIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpdateAttributeValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAttributeAction
entryRuleAttributeAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getAttributeActionRule()); }
	iv_ruleAttributeAction=ruleAttributeAction
	{ $current=$iv_ruleAttributeAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AttributeAction
ruleAttributeAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Have
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeActionAccess().getHaveKeyword_0());
		}
		(
			otherlv_1=The
			{
				newLeafNode(otherlv_1, grammarAccess.getAttributeActionAccess().getTheKeyword_1_0());
			}
			    |
			otherlv_2=An
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributeActionAccess().getAnKeyword_1_1());
			}
			    |
			otherlv_3=A
			{
				newLeafNode(otherlv_3, grammarAccess.getAttributeActionAccess().getAKeyword_1_2());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeActionAccess().getAttributeAttributeParserRuleCall_2_0());
				}
				lv_attribute_4_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeActionRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_4_0,
						"de.tud.st.featurelang.FeatureLang.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=FullStop
			{
				newLeafNode(otherlv_5, grammarAccess.getAttributeActionAccess().getFullStopKeyword_3_0());
			}
			otherlv_6=It
			{
				newLeafNode(otherlv_6, grammarAccess.getAttributeActionAccess().getItKeyword_3_1());
			}
			otherlv_7=Is
			{
				newLeafNode(otherlv_7, grammarAccess.getAttributeActionAccess().getIsKeyword_3_2());
			}
			otherlv_8=A
			{
				newLeafNode(otherlv_8, grammarAccess.getAttributeActionAccess().getAKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeActionAccess().getTypeDatatypeEnumRuleCall_3_4_0());
					}
					lv_type_9_0=ruleDatatype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeActionRule());
						}
						set(
							$current,
							"type",
							lv_type_9_0,
							"de.tud.st.featurelang.FeatureLang.Datatype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssociationAction
entryRuleAssociationAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getAssociationActionRule()); }
	iv_ruleAssociationAction=ruleAssociationAction
	{ $current=$iv_ruleAssociationAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AssociationAction
ruleAssociationAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Have
		{
			newLeafNode(otherlv_0, grammarAccess.getAssociationActionAccess().getHaveKeyword_0());
		}
		(
			otherlv_1=Associations
			{
				newLeafNode(otherlv_1, grammarAccess.getAssociationActionAccess().getAssociationsKeyword_1_0());
			}
			    |
			otherlv_2=Association
			{
				newLeafNode(otherlv_2, grammarAccess.getAssociationActionAccess().getAssociationKeyword_1_1());
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssociationActionAccess().getCreateCreateAssociationParserRuleCall_2_0_0());
					}
					lv_create_3_0=ruleCreateAssociation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssociationActionRule());
						}
						set(
							$current,
							"create",
							lv_create_3_0,
							"de.tud.st.featurelang.FeatureLang.CreateAssociation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						lv_name_4_0=RULE_ID
						{
							newLeafNode(lv_name_4_0, grammarAccess.getAssociationActionAccess().getNameIDTerminalRuleCall_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssociationActionRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssociationActionAccess().getEditEditAssociationParserRuleCall_2_1_1_0());
						}
						lv_edit_5_0=ruleEditAssociation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssociationActionRule());
							}
							set(
								$current,
								"edit",
								lv_edit_5_0,
								"de.tud.st.featurelang.FeatureLang.EditAssociation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreateAssociation
entryRuleCreateAssociation returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getCreateAssociationRule()); }
	iv_ruleCreateAssociation=ruleCreateAssociation
	{ $current=$iv_ruleCreateAssociation.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CreateAssociation
ruleCreateAssociation returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=To
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateAssociationAccess().getToKeyword_0());
		}
		(
			otherlv_1=Other
			{
				newLeafNode(otherlv_1, grammarAccess.getCreateAssociationAccess().getOtherKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateAssociationAccess().getTargetClassParserRuleCall_2_0());
				}
				lv_target_2_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateAssociationRule());
					}
					set(
						$current,
						"target",
						lv_target_2_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Called
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateAssociationAccess().getCalledKeyword_3());
		}
		(
			(
				lv_relation_4_0=RULE_ID
				{
					newLeafNode(lv_relation_4_0, grammarAccess.getCreateAssociationAccess().getRelationIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateAssociationRule());
					}
					setWithLastConsumed(
						$current,
						"relation",
						lv_relation_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEditAssociation
entryRuleEditAssociation returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getEditAssociationRule()); }
	iv_ruleEditAssociation=ruleEditAssociation
	{ $current=$iv_ruleEditAssociation.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule EditAssociation
ruleEditAssociation returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditAssociationAccess().getTypeSetCompatibleParserRuleCall_0_0());
				}
				lv_type_0_1=ruleSetCompatible
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditAssociationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"de.tud.st.featurelang.FeatureLang.SetCompatible");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getEditAssociationAccess().getTypeSetVersionRangeParserRuleCall_0_1());
				}
				lv_type_0_2=ruleSetVersionRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditAssociationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"de.tud.st.featurelang.FeatureLang.SetVersionRange");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getEditAssociationAccess().getTypeSetVariantParserRuleCall_0_2());
				}
				lv_type_0_3=ruleSetVariant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditAssociationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"de.tud.st.featurelang.FeatureLang.SetVariant");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getEditAssociationAccess().getTypeSetRightOpenParserRuleCall_0_3());
				}
				lv_type_0_4=ruleSetRightOpen
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditAssociationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_4,
						"de.tud.st.featurelang.FeatureLang.SetRightOpen");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getEditAssociationAccess().getTypeSetLeftOpenParserRuleCall_0_4());
				}
				lv_type_0_5=ruleSetLeftOpen
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditAssociationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_5,
						"de.tud.st.featurelang.FeatureLang.SetLeftOpen");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetCompatible
entryRuleSetCompatible returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getSetCompatibleRule()); }
	iv_ruleSetCompatible=ruleSetCompatible
	{ $current=$iv_ruleSetCompatible.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SetCompatible
ruleSetCompatible returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Compatible
		{
			newLeafNode(otherlv_0, grammarAccess.getSetCompatibleAccess().getCompatibleKeyword_0());
		}
		otherlv_1=With
		{
			newLeafNode(otherlv_1, grammarAccess.getSetCompatibleAccess().getWithKeyword_1());
		}
		otherlv_2=Version
		{
			newLeafNode(otherlv_2, grammarAccess.getSetCompatibleAccess().getVersionKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getSetCompatibleAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetCompatibleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetVersionRange
entryRuleSetVersionRange returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getSetVersionRangeRule()); }
	iv_ruleSetVersionRange=ruleSetVersionRange
	{ $current=$iv_ruleSetVersionRange.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SetVersionRange
ruleSetVersionRange returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=With
		{
			newLeafNode(otherlv_0, grammarAccess.getSetVersionRangeAccess().getWithKeyword_0());
		}
		otherlv_1=Version
		{
			newLeafNode(otherlv_1, grammarAccess.getSetVersionRangeAccess().getVersionKeyword_1());
		}
		otherlv_2=Range
		{
			newLeafNode(otherlv_2, grammarAccess.getSetVersionRangeAccess().getRangeKeyword_2());
		}
		otherlv_3=From
		{
			newLeafNode(otherlv_3, grammarAccess.getSetVersionRangeAccess().getFromKeyword_3());
		}
		(
			(
				lv_start_4_0=RULE_ID
				{
					newLeafNode(lv_start_4_0, grammarAccess.getSetVersionRangeAccess().getStartIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetVersionRangeRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=To
		{
			newLeafNode(otherlv_5, grammarAccess.getSetVersionRangeAccess().getToKeyword_5());
		}
		(
			(
				lv_end_6_0=RULE_ID
				{
					newLeafNode(lv_end_6_0, grammarAccess.getSetVersionRangeAccess().getEndIDTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetVersionRangeRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetVariant
entryRuleSetVariant returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getSetVariantRule()); }
	iv_ruleSetVariant=ruleSetVariant
	{ $current=$iv_ruleSetVariant.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SetVariant
ruleSetVariant returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=With
		{
			newLeafNode(otherlv_0, grammarAccess.getSetVariantAccess().getWithKeyword_0());
		}
		otherlv_1=All
		{
			newLeafNode(otherlv_1, grammarAccess.getSetVariantAccess().getAllKeyword_1());
		}
		otherlv_2=Versions
		{
			newLeafNode(otherlv_2, grammarAccess.getSetVariantAccess().getVersionsKeyword_2());
		}
		otherlv_3=Of
		{
			newLeafNode(otherlv_3, grammarAccess.getSetVariantAccess().getOfKeyword_3());
		}
		otherlv_4=Variant
		{
			newLeafNode(otherlv_4, grammarAccess.getSetVariantAccess().getVariantKeyword_4());
		}
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getSetVariantAccess().getNameIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetVariantRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetRightOpen
entryRuleSetRightOpen returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getSetRightOpenRule()); }
	iv_ruleSetRightOpen=ruleSetRightOpen
	{ $current=$iv_ruleSetRightOpen.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SetRightOpen
ruleSetRightOpen returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Up
		{
			newLeafNode(otherlv_0, grammarAccess.getSetRightOpenAccess().getUpKeyword_0());
		}
		otherlv_1=To
		{
			newLeafNode(otherlv_1, grammarAccess.getSetRightOpenAccess().getToKeyword_1());
		}
		otherlv_2=Date
		{
			newLeafNode(otherlv_2, grammarAccess.getSetRightOpenAccess().getDateKeyword_2());
		}
		(
			(
				lv_date_3_0=RULE_ID
				{
					newLeafNode(lv_date_3_0, grammarAccess.getSetRightOpenAccess().getDateIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetRightOpenRule());
					}
					setWithLastConsumed(
						$current,
						"date",
						lv_date_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSetLeftOpen
entryRuleSetLeftOpen returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getSetLeftOpenRule()); }
	iv_ruleSetLeftOpen=ruleSetLeftOpen
	{ $current=$iv_ruleSetLeftOpen.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SetLeftOpen
ruleSetLeftOpen returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Starting
		{
			newLeafNode(otherlv_0, grammarAccess.getSetLeftOpenAccess().getStartingKeyword_0());
		}
		otherlv_1=From
		{
			newLeafNode(otherlv_1, grammarAccess.getSetLeftOpenAccess().getFromKeyword_1());
		}
		otherlv_2=Date
		{
			newLeafNode(otherlv_2, grammarAccess.getSetLeftOpenAccess().getDateKeyword_2());
		}
		(
			(
				lv_date_3_0=RULE_ID
				{
					newLeafNode(lv_date_3_0, grammarAccess.getSetLeftOpenAccess().getDateIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetLeftOpenRule());
					}
					setWithLastConsumed(
						$current,
						"date",
						lv_date_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInheritanceAction
entryRuleInheritanceAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getInheritanceActionRule()); }
	iv_ruleInheritanceAction=ruleInheritanceAction
	{ $current=$iv_ruleInheritanceAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InheritanceAction
ruleInheritanceAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInheritanceActionAccess().getCreateCreateInheritanceParserRuleCall_0_0());
				}
				lv_create_0_0=ruleCreateInheritance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInheritanceActionRule());
					}
					set(
						$current,
						"create",
						lv_create_0_0,
						"de.tud.st.featurelang.FeatureLang.CreateInheritance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getInheritanceActionAccess().getEditEditInheritanceParserRuleCall_1_0());
				}
				lv_edit_1_0=ruleEditInheritance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInheritanceActionRule());
					}
					set(
						$current,
						"edit",
						lv_edit_1_0,
						"de.tud.st.featurelang.FeatureLang.EditInheritance");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreateInheritance
entryRuleCreateInheritance returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getCreateInheritanceRule()); }
	iv_ruleCreateInheritance=ruleCreateInheritance
	{ $current=$iv_ruleCreateInheritance.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CreateInheritance
ruleCreateInheritance returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Inherit
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateInheritanceAccess().getInheritKeyword_0());
		}
		otherlv_1=From
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateInheritanceAccess().getFromKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateInheritanceAccess().getParentClassParserRuleCall_2_0());
				}
				lv_parent_2_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateInheritanceRule());
					}
					set(
						$current,
						"parent",
						lv_parent_2_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEditInheritance
entryRuleEditInheritance returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getEditInheritanceRule()); }
	iv_ruleEditInheritance=ruleEditInheritance
	{ $current=$iv_ruleEditInheritance.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule EditInheritance
ruleEditInheritance returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Have
		{
			newLeafNode(otherlv_0, grammarAccess.getEditInheritanceAccess().getHaveKeyword_0());
		}
		otherlv_1=Inheritance
		{
			newLeafNode(otherlv_1, grammarAccess.getEditInheritanceAccess().getInheritanceKeyword_1());
		}
		otherlv_2=URI
		{
			newLeafNode(otherlv_2, grammarAccess.getEditInheritanceAccess().getURIKeyword_2());
		}
		(
			(
				lv_uri_3_0=RULE_ID
				{
					newLeafNode(lv_uri_3_0, grammarAccess.getEditInheritanceAccess().getUriIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditInheritanceRule());
					}
					setWithLastConsumed(
						$current,
						"uri",
						lv_uri_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCompositionAction
entryRuleCompositionAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getCompositionActionRule()); }
	iv_ruleCompositionAction=ruleCompositionAction
	{ $current=$iv_ruleCompositionAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CompositionAction
ruleCompositionAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionActionAccess().getCreateCreateCompositionParserRuleCall_0_0());
				}
				lv_create_0_0=ruleCreateComposition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionActionRule());
					}
					set(
						$current,
						"create",
						lv_create_0_0,
						"de.tud.st.featurelang.FeatureLang.CreateComposition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionActionAccess().getEditEditCompositionParserRuleCall_1_0());
				}
				lv_edit_1_0=ruleEditComposition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionActionRule());
					}
					set(
						$current,
						"edit",
						lv_edit_1_0,
						"de.tud.st.featurelang.FeatureLang.EditComposition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCreateComposition
entryRuleCreateComposition returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getCreateCompositionRule()); }
	iv_ruleCreateComposition=ruleCreateComposition
	{ $current=$iv_ruleCreateComposition.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CreateComposition
ruleCreateComposition returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Compose
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateCompositionAccess().getComposeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateCompositionAccess().getTargetClassParserRuleCall_1_0());
				}
				lv_target_1_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateCompositionRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Called
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateCompositionAccess().getCalledKeyword_2());
		}
		(
			(
				lv_relation_3_0=RULE_ID
				{
					newLeafNode(lv_relation_3_0, grammarAccess.getCreateCompositionAccess().getRelationIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateCompositionRule());
					}
					setWithLastConsumed(
						$current,
						"relation",
						lv_relation_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=FullStop
			{
				newLeafNode(otherlv_4, grammarAccess.getCreateCompositionAccess().getFullStopKeyword_4_0());
			}
			otherlv_5=It
			{
				newLeafNode(otherlv_5, grammarAccess.getCreateCompositionAccess().getItKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateCompositionAccess().getPriorityPriorityParserRuleCall_4_2_0());
					}
					lv_priority_6_0=rulePriority
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateCompositionRule());
						}
						set(
							$current,
							"priority",
							lv_priority_6_0,
							"de.tud.st.featurelang.FeatureLang.Priority");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=Be
			{
				newLeafNode(otherlv_7, grammarAccess.getCreateCompositionAccess().getBeKeyword_4_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateCompositionAccess().getPublicityPublicityEnumRuleCall_4_4_0());
					}
					lv_publicity_8_0=rulePublicity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateCompositionRule());
						}
						set(
							$current,
							"publicity",
							lv_publicity_8_0,
							"de.tud.st.featurelang.FeatureLang.Publicity");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleEditComposition
entryRuleEditComposition returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getEditCompositionRule()); }
	iv_ruleEditComposition=ruleEditComposition
	{ $current=$iv_ruleEditComposition.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule EditComposition
ruleEditComposition returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Have
		{
			newLeafNode(otherlv_0, grammarAccess.getEditCompositionAccess().getHaveKeyword_0());
		}
		otherlv_1=Composition
		{
			newLeafNode(otherlv_1, grammarAccess.getEditCompositionAccess().getCompositionKeyword_1());
		}
		(
			(
				lv_compositionName_2_0=RULE_ID
				{
					newLeafNode(lv_compositionName_2_0, grammarAccess.getEditCompositionAccess().getCompositionNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditCompositionRule());
					}
					setWithLastConsumed(
						$current,
						"compositionName",
						lv_compositionName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=With
		{
			newLeafNode(otherlv_3, grammarAccess.getEditCompositionAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEditCompositionAccess().getParameterCompositionParameterEnumRuleCall_4_0());
				}
				lv_parameter_4_0=ruleCompositionParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditCompositionRule());
					}
					set(
						$current,
						"parameter",
						lv_parameter_4_0,
						"de.tud.st.featurelang.FeatureLang.CompositionParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getEditCompositionAccess().getNameIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditCompositionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=The
			{
				newLeafNode(otherlv_0, grammarAccess.getClassAccess().getTheKeyword_0_0());
			}
			    |
			otherlv_1=A
			{
				newLeafNode(otherlv_1, grammarAccess.getClassAccess().getAKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getAbstractAbstractionEnumRuleCall_1_0());
				}
				lv_abstract_2_0=ruleAbstraction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"abstract",
						lv_abstract_2_0,
						"de.tud.st.featurelang.FeatureLang.Abstraction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=Class
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getClassKeyword_2());
			}
		)?
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=Attribute
			{
				newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
			}
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Identifier
ruleIdentifier returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIdentifierAccess().getValueIdentifierValueEnumRuleCall_0_0());
				}
				lv_value_0_0=ruleIdentifierValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdentifierRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"de.tud.st.featurelang.FeatureLang.IdentifierValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifierRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	iv_rulePriority=rulePriority
	{ $current=$iv_rulePriority.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Priority
rulePriority returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPriorityAccess().getPriorityPriorityValueEnumRuleCall_0());
			}
			lv_priority_0_0=rulePriorityValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPriorityRule());
				}
				set(
					$current,
					"priority",
					lv_priority_0_0,
					"de.tud.st.featurelang.FeatureLang.PriorityValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Rule CompositionParameter
ruleCompositionParameter returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=URI
			{
				$current = grammarAccess.getCompositionParameterAccess().getURIEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompositionParameterAccess().getURIEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Role
			{
				$current = grammarAccess.getCompositionParameterAccess().getROLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompositionParameterAccess().getROLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=Target
			{
				$current = grammarAccess.getCompositionParameterAccess().getTARGETEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompositionParameterAccess().getTARGETEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Publicity
rulePublicity returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Public
			{
				$current = grammarAccess.getPublicityAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPublicityAccess().getPUBLICEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Private
			{
				$current = grammarAccess.getPublicityAccess().getPRIVATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPublicityAccess().getPRIVATEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule PriorityValue
rulePriorityValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Should
			{
				$current = grammarAccess.getPriorityValueAccess().getSHOULDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPriorityValueAccess().getSHOULDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Must
			{
				$current = grammarAccess.getPriorityValueAccess().getMUSTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPriorityValueAccess().getMUSTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Abstraction
ruleAbstraction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=Abstract
		{
			$current = grammarAccess.getAbstractionAccess().getABSTRACTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAbstractionAccess().getABSTRACTEnumLiteralDeclaration());
		}
	)
;

// Rule IdentifierValue
ruleIdentifierValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Name
			{
				$current = grammarAccess.getIdentifierValueAccess().getNAMEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getIdentifierValueAccess().getNAMEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=URI
			{
				$current = grammarAccess.getIdentifierValueAccess().getURIEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getIdentifierValueAccess().getURIEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Datatype
ruleDatatype returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Time
			{
				$current = grammarAccess.getDatatypeAccess().getWORDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDatatypeAccess().getWORDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Phrase
			{
				$current = grammarAccess.getDatatypeAccess().getPHRASEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDatatypeAccess().getPHRASEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=Number
			{
				$current = grammarAccess.getDatatypeAccess().getNUMBEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDatatypeAccess().getNUMBEREnumLiteralDeclaration_2());
			}
		)
	)
;
