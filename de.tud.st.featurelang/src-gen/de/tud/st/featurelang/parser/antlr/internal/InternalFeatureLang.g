/*
 * generated by Xtext 2.30.0
 */
grammar InternalFeatureLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.tud.st.featurelang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.tud.st.featurelang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.tud.st.featurelang.services.FeatureLangGrammarAccess;

}

@parser::members {

 	private FeatureLangGrammarAccess grammarAccess;

    public InternalFeatureLangParser(TokenStream input, FeatureLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FeatureRequest";
   	}

   	@Override
   	protected FeatureLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFeatureRequest
entryRuleFeatureRequest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRequestRule()); }
	iv_ruleFeatureRequest=ruleFeatureRequest
	{ $current=$iv_ruleFeatureRequest.current; }
	EOF;

// Rule FeatureRequest
ruleFeatureRequest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFeatureRequestAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFeatureRequestRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"de.tud.st.featurelang.FeatureLang.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getTargetClassParserRuleCall_0_0());
				}
				lv_target_0_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"target",
						lv_target_0_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementAccess().getPriorityPriorityParserRuleCall_1_0_0_0());
						}
						lv_priority_1_0=rulePriority
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementRule());
							}
							set(
								$current,
								"priority",
								lv_priority_1_0,
								"de.tud.st.featurelang.FeatureLang.Priority");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						lv_negation_2_0='not'
						{
							newLeafNode(lv_negation_2_0, grammarAccess.getStatementAccess().getNegationNotKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStatementRule());
							}
							setWithLastConsumed($current, "negation", lv_negation_2_0 != null, "not");
						}
					)
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementAccess().getActionActionParserRuleCall_1_0_2_0());
						}
						lv_action_3_0=ruleAction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementRule());
							}
							set(
								$current,
								"action",
								lv_action_3_0,
								"de.tud.st.featurelang.FeatureLang.Action");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getUpdateUpdateActionParserRuleCall_1_1_0());
					}
					lv_update_4_0=ruleUpdateAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"update",
							lv_update_4_0,
							"de.tud.st.featurelang.FeatureLang.UpdateAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_5='.'
			{
				newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getFullStopKeyword_2());
			}
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeAttributeActionParserRuleCall_0_0());
				}
				lv_type_0_1=ruleAttributeAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"de.tud.st.featurelang.FeatureLang.AttributeAction");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeAssociationActionParserRuleCall_0_1());
				}
				lv_type_0_2=ruleAssociationAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"de.tud.st.featurelang.FeatureLang.AssociationAction");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionAccess().getTypeInheritanceActionParserRuleCall_0_2());
				}
				lv_type_0_3=ruleInheritanceAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"de.tud.st.featurelang.FeatureLang.InheritanceAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUpdateAction
entryRuleUpdateAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getUpdateActionRule()); }
	iv_ruleUpdateAction=ruleUpdateAction
	{ $current=$iv_ruleUpdateAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAction
ruleUpdateAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='has'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateActionAccess().getHasKeyword_0());
		}
		otherlv_1='an'
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateActionAccess().getAnKeyword_1());
		}
		otherlv_2='existing'
		{
			newLeafNode(otherlv_2, grammarAccess.getUpdateActionAccess().getExistingKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateActionAccess().getAttributeAttributeParserRuleCall_3_0());
				}
				lv_attribute_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_3_0,
						"de.tud.st.featurelang.FeatureLang.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getUpdateActionAccess().getFullStopKeyword_4());
		}
		otherlv_5='it'
		{
			newLeafNode(otherlv_5, grammarAccess.getUpdateActionAccess().getItKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateActionAccess().getPriorityPriorityParserRuleCall_6_0());
				}
				lv_priority_6_0=rulePriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
					}
					set(
						$current,
						"priority",
						lv_priority_6_0,
						"de.tud.st.featurelang.FeatureLang.Priority");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='be'
		{
			newLeafNode(otherlv_7, grammarAccess.getUpdateActionAccess().getBeKeyword_7());
		}
		otherlv_8='a'
		{
			newLeafNode(otherlv_8, grammarAccess.getUpdateActionAccess().getAKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateActionAccess().getTypeDatatypeEnumRuleCall_9_0());
				}
				lv_type_9_0=ruleDatatype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateActionRule());
					}
					set(
						$current,
						"type",
						lv_type_9_0,
						"de.tud.st.featurelang.FeatureLang.Datatype");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAttributeAction
entryRuleAttributeAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getAttributeActionRule()); }
	iv_ruleAttributeAction=ruleAttributeAction
	{ $current=$iv_ruleAttributeAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AttributeAction
ruleAttributeAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='have'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeActionAccess().getHaveKeyword_0());
		}
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeActionAccess().getTheKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeActionAccess().getAttributeAttributeParserRuleCall_2_0());
				}
				lv_attribute_2_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeActionRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_2_0,
						"de.tud.st.featurelang.FeatureLang.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getAttributeActionAccess().getFullStopKeyword_3());
		}
		(
			otherlv_4='it'
			{
				newLeafNode(otherlv_4, grammarAccess.getAttributeActionAccess().getItKeyword_4_0());
			}
			otherlv_5='is'
			{
				newLeafNode(otherlv_5, grammarAccess.getAttributeActionAccess().getIsKeyword_4_1());
			}
			otherlv_6='a'
			{
				newLeafNode(otherlv_6, grammarAccess.getAttributeActionAccess().getAKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeActionAccess().getTypeDatatypeEnumRuleCall_4_3_0());
					}
					lv_type_7_0=ruleDatatype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeActionRule());
						}
						set(
							$current,
							"type",
							lv_type_7_0,
							"de.tud.st.featurelang.FeatureLang.Datatype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssociationAction
entryRuleAssociationAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getAssociationActionRule()); }
	iv_ruleAssociationAction=ruleAssociationAction
	{ $current=$iv_ruleAssociationAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AssociationAction
ruleAssociationAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='have'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssociationActionAccess().getHaveKeyword_0());
		}
		otherlv_1='associations'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssociationActionAccess().getAssociationsKeyword_1());
		}
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssociationActionAccess().getToKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationActionAccess().getTargetClassParserRuleCall_3_0());
				}
				lv_target_3_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationActionRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='called'
		{
			newLeafNode(otherlv_4, grammarAccess.getAssociationActionAccess().getCalledKeyword_4());
		}
		(
			(
				lv_relation_5_0=RULE_ID
				{
					newLeafNode(lv_relation_5_0, grammarAccess.getAssociationActionAccess().getRelationIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationActionRule());
					}
					setWithLastConsumed(
						$current,
						"relation",
						lv_relation_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInheritanceAction
entryRuleInheritanceAction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getInheritanceActionRule()); }
	iv_ruleInheritanceAction=ruleInheritanceAction
	{ $current=$iv_ruleInheritanceAction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InheritanceAction
ruleInheritanceAction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inherit'
		{
			newLeafNode(otherlv_0, grammarAccess.getInheritanceActionAccess().getInheritKeyword_0());
		}
		otherlv_1='from'
		{
			newLeafNode(otherlv_1, grammarAccess.getInheritanceActionAccess().getFromKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInheritanceActionAccess().getParentClassParserRuleCall_2_0());
				}
				lv_parent_2_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInheritanceActionRule());
					}
					set(
						$current,
						"parent",
						lv_parent_2_0,
						"de.tud.st.featurelang.FeatureLang.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='the'
			{
				newLeafNode(otherlv_0, grammarAccess.getClassAccess().getTheKeyword_0());
			}
		)?
		(
			otherlv_1='class'
			{
				newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
			}
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='attribute'
			{
				newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
			}
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	iv_rulePriority=rulePriority
	{ $current=$iv_rulePriority.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Priority
rulePriority returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPriorityAccess().getPriorityPriorityValueEnumRuleCall_0());
			}
			lv_priority_0_0=rulePriorityValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPriorityRule());
				}
				set(
					$current,
					"priority",
					lv_priority_0_0,
					"de.tud.st.featurelang.FeatureLang.PriorityValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Rule PriorityValue
rulePriorityValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='should'
			{
				$current = grammarAccess.getPriorityValueAccess().getSHOULDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPriorityValueAccess().getSHOULDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='must'
			{
				$current = grammarAccess.getPriorityValueAccess().getMUSTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPriorityValueAccess().getMUSTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Datatype
ruleDatatype returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='word'
			{
				$current = grammarAccess.getDatatypeAccess().getWORDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDatatypeAccess().getWORDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='phrase'
			{
				$current = grammarAccess.getDatatypeAccess().getPHRASEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDatatypeAccess().getPHRASEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='number'
			{
				$current = grammarAccess.getDatatypeAccess().getNUMBEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDatatypeAccess().getNUMBEREnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
