/*
 * generated by Xtext 2.30.0
 */
package de.tud.st.featurelang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.tud.st.featurelang.featureLang.Statement
import de.tud.st.featurelang.featureLang.Action

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
 // @author Karl Kegel 2023
 
class FeatureLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('out.txt',
			resource.allContents
				.filter(Statement)
				.map[compile]
				.join())
	}
	
	private def compile(Statement s) '''
		load class «s.getTarget().name»
		«IF s.getAction() !== null »
			«s.getAction().compile»
		«ENDIF»
		save class «s.getTarget().name»
    '''
    
    
	private def compile(Action a) '''
		«a.getType().toString()»
    '''
}
