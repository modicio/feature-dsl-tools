/*
 * generated by Xtext 2.30.0
 */
package de.tud.st.featurelang.generator

import de.tud.st.featurelang.featureLang.AssociationAction
import de.tud.st.featurelang.featureLang.AttributeAction
import de.tud.st.featurelang.featureLang.InheritanceAction
import de.tud.st.featurelang.featureLang.PriorityValue
import de.tud.st.featurelang.featureLang.UpdateAction
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.tud.st.featurelang.featureLang.CreationStatement
import de.tud.st.featurelang.featureLang.ChangeStatement
import de.tud.st.featurelang.featureLang.Statement
import de.tud.st.featurelang.featureLang.CompositionAction
import de.tud.st.featurelang.featureLang.Abstraction
import de.tud.st.featurelang.featureLang.IdentifierValue
import de.tud.st.featurelang.featureLang.SetCompatible
import de.tud.st.featurelang.featureLang.SetVersionRange
import de.tud.st.featurelang.featureLang.SetVariant
import de.tud.st.featurelang.featureLang.SetRightOpen
import de.tud.st.featurelang.featureLang.SetLeftOpen
import de.tud.st.featurelang.featureLang.Publicity
import de.tud.st.featurelang.featureLang.CompositionParameter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
 // @author Karl Kegel 2023
 
class FeatureLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val result = resource.allContents
				.filter(Statement)
				.map[compileStatement]
				.join("&\n");
		System.out.println(">>>")
		System.out.println(result)
		System.out.println("<<<")
		fsa.generateFile("evolution.txt", result);
	}
	
	private def compileStatement(Statement s){
		switch s {
			ChangeStatement : s.compile
			CreationStatement : s.compile
			default : 'NOP'
		}
	}
	
	private def compile(ChangeStatement s) '''
		«val should = s.getPriority() !== null && s.getPriority().getPriority() === PriorityValue.SHOULD»
		«IF should»
				START OPTIONAL
		«ENDIF»
		OPEN CLASS «s.getTarget().name»
		«IF s.getAction() !== null »
			«s.getAction().getType().compileAction(s.isNegation())»
		«ELSEIF s.getUpdate() !== null»
			«s.getUpdate().compileUpdate()»
		«ELSEIF s.getIdentifier() !== null»	
			«val identifier = s.getIdentifier()»
			«val nameId = identifier.getValue() === IdentifierValue.NAME»
			«val newIdentifier = identifier.getName()»
			«IF nameId»
				CHANGE NAME TO «newIdentifier»
			«ELSE» 
				CHANGE URI TO «newIdentifier»	
			«ENDIF»	
		«ENDIF»
		CLOSE CLASS «s.getTarget().name»
		«IF should»
				END OPTIONAL
		«ENDIF»
    '''
    
    private def compile(CreationStatement s)'''
		«val should = s.getPriority() !== null && s.getPriority().getPriority() === PriorityValue.SHOULD»
		«val name = s.getClassElement().getName()»
		«val abstract = s.getClassElement().getAbstract() !== null && s.getClassElement().getAbstract() === Abstraction.ABSTRACT»
		«IF should»
			START OPTIONAL
		«ENDIF»
		«IF s.isNegation() »
			DELETE CLASS «name»
		«ELSE»
			«IF abstract» 
				CREATE ABSTRACT CLASS «name»
			«ELSE»	
				CREATE CLASS «name»
			«ENDIF»	
		«ENDIF»
		«IF should»
			END OPTIONAL
		«ENDIF»
    '''
    
	private def compileAction(EObject a, boolean negation){
		switch a {
			AttributeAction : a.compileAttributeAction(negation)
			AssociationAction : a.compileAssociationAction(negation)
			InheritanceAction : a.compileInheritanceAction(negation)
			CompositionAction : a.compileCompositionAction(negation)
			default : 'NOP'
		}
	}
	
	private def compileAttributeAction(AttributeAction a, boolean negation){
		val attr =  a.getAttribute()
		val attrName = attr.getName()
		'''
		«IF negation»
			DELETE ATTRIBUTE «attrName»
		«ELSE»
			ADD ATTRIBUTE «attrName»
			OPEN ATTRIBUTE «attrName»
			«IF a.getType() !== null»
				SET TYPE «a.getType()»
			«ELSE»
				SET TYPE DEFAULT
			«ENDIF»
			CLOSE ATTRIBUTE «attrName»
		«ENDIF»
		'''
	}
	
	private def compileAssociationAction(AssociationAction a, boolean negation){
		'''
		«IF a.getCreate() !== null»
			«val targetClass = a.getCreate().getTarget().getName()»
			«val relation = a.getCreate().getRelation()»
			«IF negation»
				DELETE ASSOCIATION «relation»
			«ELSE»
				ADD ASSOCIATION «relation» TARGET «targetClass»
			«ENDIF» 
		«ELSE» 
			«val associationName = a.getName()»
			OPEN ASSOCIATION «associationName»
			«a.getEdit().getType().compileEditAssociation()»
			CLOSE ASSOCIATION «associationName»
		«ENDIF»
		'''
	}
	
	private def compileEditAssociation(EObject a){
		switch a {
			SetCompatible : a.compileSetCompatible()
			SetVersionRange : a.compileSetVersionRange()
			SetVariant : a.compileSetVariant()
			SetLeftOpen : a.compileSetLeftOpen()
			SetRightOpen : a.compileSetRightOpen()
			default : 'NOP'
		}
	}
	
	private def compileSetCompatible(SetCompatible a) {
		val versionName = a.getName() 
		'''
		SET COMPATIBLE WITH VERSION «versionName»
		'''
	}
	
	private def compileSetVersionRange(SetVersionRange a) {
		val start = a.getStart()
		val end = a.getEnd() 
		'''
		SET VERSION RANGE FROM «start» TO «end»
		'''
	}
	
	private def compileSetVariant(SetVariant a) {
		val variantName = a.getName()
		'''
		SET COMPATIBLE WITH ALL VERSIONS OF VARIANT «variantName»
		'''
	}
	
	private def compileSetLeftOpen(SetLeftOpen a) {
		val date = a.getDate()
		'''
		SET VERSION UP TO DATE «date»
		'''
	}
	
	private def compileSetRightOpen(SetRightOpen a) {
		val date = a.getDate()
		'''
		SET VERSION STARTING FROM DATE «date»
		'''
	}
	
	private def compileCompositionAction(CompositionAction a, boolean negation) {
		'''
		«IF a.getCreate() !== null»
			«val targetClass = a.getCreate().getTarget().getName()»
			«val relation = a.getCreate().getRelation()»
			«IF negation»
				DELETE COMPOSITION «targetClass»
			«ELSE»
				ADD COMPOSITION «relation» TARGET «targetClass»
				«IF a.getCreate().getPublicity() !== null»
					«val should = a.getCreate().getPriority() !== null && a.getCreate().getPriority().getPriority() === PriorityValue.SHOULD»	
					«IF should»
						START OPTIONAL
					«ENDIF»
					«val public = a.getCreate().getPublicity() === Publicity.PUBLIC»
					«IF public»
						MAKE COMPOSITION PUBLIC
					«ELSE» 
						MAKE COMPOSITION PRIVATE
					«ENDIF»
					«IF should»
						END OPTIONAL
					«ENDIF»	
				«ENDIF»	
			«ENDIF»
		«ELSE» 
			«val compositionName = a.getEdit().getCompositionName()»
			«val parameter = a.getEdit().getParameter()»
			«val newName = a.getEdit().getName()»
			OPEN COMPOSITION «compositionName»
			«IF parameter === CompositionParameter.URI»
				SET URI TO «newName»
			«ELSEIF parameter === CompositionParameter.ROLE»
				SET ROLE TO «newName»
			«ELSE»
				SET TARGET TO «newName»
			«ENDIF»	
			CLOSE COMPOSITION «compositionName»
		«ENDIF»	
		'''
	}
	
	private def compileInheritanceAction(InheritanceAction a, boolean negation){
		'''
		«IF a.getCreate() !== null»
			«val targetClass = a.getCreate().getParent().getName()»
			«IF negation»
				DELETE PARENT_RELATION «targetClass»
			«ELSE»
				ADD PARENT_RELATION «targetClass»
			«ENDIF»
		«ELSE» 
			«val newUri = a.getEdit().getUri()»
			SET INHERITANCE URI TO «newUri»
		«ENDIF»	
		'''
	}
	
	private def compileUpdate(UpdateAction a) '''
		«val should = a.getPriority() !== null && a.getPriority().getPriority() === PriorityValue.SHOULD»
		«val changeType = a.getDatatype() !== null»
		«val changeIdentifier = a.getIdentifier() !== null»
		«IF should»
		START OPTIONAL
		«ENDIF» 
		OPEN ATTRIBUTE «a.getAttribute().getName()»
		«IF changeType»
			SET TYPE «a.getDatatype().getType()»
		«ELSEIF changeIdentifier» 
			«val identifier = a.getIdentifier().getIdentifier()»
			«val nameId = identifier.getValue() === IdentifierValue.NAME»
			«val newIdentifier = identifier.getName()»
			«IF nameId»
				CHANGE ATTRIBUTE NAME TO «newIdentifier»
			«ELSE» 
				CHANGE ATTRIBUTE URI TO «newIdentifier»
			«ENDIF»	
		«ELSE»
			«val value = a.getValue().getValue()»
			SET ATTRIBUTE VALUE TO «value»
		«ENDIF»	
		CLOSE ATTRIBUTE «a.getAttribute().getName()»
		«IF should»
		END OPTIONAL
		«ENDIF»
	'''
}
