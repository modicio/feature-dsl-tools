/*
 * generated by Xtext 2.30.0
 */
package de.tud.st.featurelang.generator

import de.tud.st.featurelang.featureLang.Action
import de.tud.st.featurelang.featureLang.PriorityValue
import de.tud.st.featurelang.featureLang.Statement
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.tud.st.featurelang.featureLang.AttributeAction
import de.tud.st.featurelang.featureLang.AssociationAction
import de.tud.st.featurelang.featureLang.InheritanceAction

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
 // @author Karl Kegel 2023
 
class FeatureLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('out.txt',
			resource.allContents
				.filter(Statement)
				.map[compile]
				.join())
	}
	
	private def compile(Statement s) '''
		«val should = s.getPriority() !== null && s.getPriority().getPriority() === PriorityValue.SHOULD»
		«IF should»
				START OPTIONAL
		«ENDIF»
		LOAD CLASS «s.getTarget().name»
		«IF s.getAction() !== null »
			«s.getAction().compile(s.isNegation())»
		«ENDIF»
		SAVE CLASS «s.getTarget().name»
		«IF should»
				END OPTIONAL
		«ENDIF»
    '''
    
    
	private def compile(Action a, boolean negation){
		switch a {
			AttributeAction : a.compileAttributeAction(negation)
			AssociationAction : a.compileAssociationAction(negation)
			InheritanceAction : a.compileInheritanceAction(negation)
			default : 'NOP'
		}
	}
	
	private def compileAttributeAction(AttributeAction a, boolean neagtion)'''
		TODO ATTR
	'''
	
	private def compileAssociationAction(AssociationAction a, boolean neagtion)'''
		TODO ASSO
	'''
	
	private def compileInheritanceAction(InheritanceAction a, boolean neagtion)'''
		TODO INHER
	'''
}
